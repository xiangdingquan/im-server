// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.tl.handshake_service.proto

package mtproto // import "open.chat/mtproto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// --------------------------------------------------------------------------------------------
// req_pq#60469778 nonce:int128 = ResPQ;
type TLReqPq struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLReqPq) Reset()         { *m = TLReqPq{} }
func (m *TLReqPq) String() string { return proto.CompactTextString(m) }
func (*TLReqPq) ProtoMessage()    {}
func (*TLReqPq) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_service_a18dae73e07ff2f1, []int{0}
}
func (m *TLReqPq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReqPq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReqPq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLReqPq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReqPq.Merge(dst, src)
}
func (m *TLReqPq) XXX_Size() int {
	return m.Size()
}
func (m *TLReqPq) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReqPq.DiscardUnknown(m)
}

var xxx_messageInfo_TLReqPq proto.InternalMessageInfo

func (m *TLReqPq) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReqPq) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// req_pq_multi#be7e8ef1 nonce:int128 = ResPQ;
type TLReqPqMulti struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLReqPqMulti) Reset()         { *m = TLReqPqMulti{} }
func (m *TLReqPqMulti) String() string { return proto.CompactTextString(m) }
func (*TLReqPqMulti) ProtoMessage()    {}
func (*TLReqPqMulti) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_service_a18dae73e07ff2f1, []int{1}
}
func (m *TLReqPqMulti) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReqPqMulti) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReqPqMulti.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLReqPqMulti) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReqPqMulti.Merge(dst, src)
}
func (m *TLReqPqMulti) XXX_Size() int {
	return m.Size()
}
func (m *TLReqPqMulti) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReqPqMulti.DiscardUnknown(m)
}

var xxx_messageInfo_TLReqPqMulti proto.InternalMessageInfo

func (m *TLReqPqMulti) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReqPqMulti) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params;
type TLReq_DHParams struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte        `protobuf:"bytes,3,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	P                    string        `protobuf:"bytes,4,opt,name=p,proto3" json:"p,omitempty"`
	Q                    string        `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	PublicKeyFingerprint int64         `protobuf:"varint,6,opt,name=public_key_fingerprint,json=publicKeyFingerprint,proto3" json:"public_key_fingerprint,omitempty"`
	EncryptedData        string        `protobuf:"bytes,7,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLReq_DHParams) Reset()         { *m = TLReq_DHParams{} }
func (m *TLReq_DHParams) String() string { return proto.CompactTextString(m) }
func (*TLReq_DHParams) ProtoMessage()    {}
func (*TLReq_DHParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_service_a18dae73e07ff2f1, []int{2}
}
func (m *TLReq_DHParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReq_DHParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReq_DHParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLReq_DHParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReq_DHParams.Merge(dst, src)
}
func (m *TLReq_DHParams) XXX_Size() int {
	return m.Size()
}
func (m *TLReq_DHParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReq_DHParams.DiscardUnknown(m)
}

var xxx_messageInfo_TLReq_DHParams proto.InternalMessageInfo

func (m *TLReq_DHParams) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReq_DHParams) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *TLReq_DHParams) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *TLReq_DHParams) GetP() string {
	if m != nil {
		return m.P
	}
	return ""
}

func (m *TLReq_DHParams) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLReq_DHParams) GetPublicKeyFingerprint() int64 {
	if m != nil {
		return m.PublicKeyFingerprint
	}
	return 0
}

func (m *TLReq_DHParams) GetEncryptedData() string {
	if m != nil {
		return m.EncryptedData
	}
	return ""
}

// --------------------------------------------------------------------------------------------
// set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;
type TLSetClient_DHParams struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte        `protobuf:"bytes,3,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	EncryptedData        string        `protobuf:"bytes,4,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLSetClient_DHParams) Reset()         { *m = TLSetClient_DHParams{} }
func (m *TLSetClient_DHParams) String() string { return proto.CompactTextString(m) }
func (*TLSetClient_DHParams) ProtoMessage()    {}
func (*TLSetClient_DHParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_service_a18dae73e07ff2f1, []int{3}
}
func (m *TLSetClient_DHParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSetClient_DHParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSetClient_DHParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLSetClient_DHParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSetClient_DHParams.Merge(dst, src)
}
func (m *TLSetClient_DHParams) XXX_Size() int {
	return m.Size()
}
func (m *TLSetClient_DHParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSetClient_DHParams.DiscardUnknown(m)
}

var xxx_messageInfo_TLSetClient_DHParams proto.InternalMessageInfo

func (m *TLSetClient_DHParams) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSetClient_DHParams) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *TLSetClient_DHParams) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *TLSetClient_DHParams) GetEncryptedData() string {
	if m != nil {
		return m.EncryptedData
	}
	return ""
}

// --------------------------------------------------------------------------------------------
// destroy_auth_key#d1435160 = DestroyAuthKeyRes;
type TLDestroyAuthKey struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLDestroyAuthKey) Reset()         { *m = TLDestroyAuthKey{} }
func (m *TLDestroyAuthKey) String() string { return proto.CompactTextString(m) }
func (*TLDestroyAuthKey) ProtoMessage()    {}
func (*TLDestroyAuthKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_service_a18dae73e07ff2f1, []int{4}
}
func (m *TLDestroyAuthKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDestroyAuthKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDestroyAuthKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLDestroyAuthKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDestroyAuthKey.Merge(dst, src)
}
func (m *TLDestroyAuthKey) XXX_Size() int {
	return m.Size()
}
func (m *TLDestroyAuthKey) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDestroyAuthKey.DiscardUnknown(m)
}

var xxx_messageInfo_TLDestroyAuthKey proto.InternalMessageInfo

func (m *TLDestroyAuthKey) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func init() {
	proto.RegisterType((*TLReqPq)(nil), "mtproto.TL_req_pq")
	proto.RegisterType((*TLReqPqMulti)(nil), "mtproto.TL_req_pq_multi")
	proto.RegisterType((*TLReq_DHParams)(nil), "mtproto.TL_req_DH_params")
	proto.RegisterType((*TLSetClient_DHParams)(nil), "mtproto.TL_set_client_DH_params")
	proto.RegisterType((*TLDestroyAuthKey)(nil), "mtproto.TL_destroy_auth_key")
}
func (this *TLReqPq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&mtproto.TLReqPq{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReqPqMulti) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&mtproto.TLReqPqMulti{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReq_DHParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&mtproto.TLReq_DHParams{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "P: "+fmt.Sprintf("%#v", this.P)+",\n")
	s = append(s, "Q: "+fmt.Sprintf("%#v", this.Q)+",\n")
	s = append(s, "PublicKeyFingerprint: "+fmt.Sprintf("%#v", this.PublicKeyFingerprint)+",\n")
	s = append(s, "EncryptedData: "+fmt.Sprintf("%#v", this.EncryptedData)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSetClient_DHParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&mtproto.TLSetClient_DHParams{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "EncryptedData: "+fmt.Sprintf("%#v", this.EncryptedData)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDestroyAuthKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLDestroyAuthKey{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSchemaTlHandshakeService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCAuthKeyClient is the client API for RPCAuthKey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCAuthKeyClient interface {
	// req_pq#60469778 nonce:int128 = ResPQ;
	ReqPq(ctx context.Context, in *TLReqPq, opts ...grpc.CallOption) (*ResPQ, error)
	// req_pq_multi#be7e8ef1 nonce:int128 = ResPQ;
	ReqPqMulti(ctx context.Context, in *TLReqPqMulti, opts ...grpc.CallOption) (*ResPQ, error)
	// req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params;
	Req_DHParams(ctx context.Context, in *TLReq_DHParams, opts ...grpc.CallOption) (*Server_DH_Params, error)
	// set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;
	SetClient_DHParams(ctx context.Context, in *TLSetClient_DHParams, opts ...grpc.CallOption) (*SetClient_DHParamsAnswer, error)
	// destroy_auth_key#d1435160 = DestroyAuthKeyRes;
	DestroyAuthKey(ctx context.Context, in *TLDestroyAuthKey, opts ...grpc.CallOption) (*DestroyAuthKeyRes, error)
}

type rPCAuthKeyClient struct {
	cc *grpc.ClientConn
}

func NewRPCAuthKeyClient(cc *grpc.ClientConn) RPCAuthKeyClient {
	return &rPCAuthKeyClient{cc}
}

func (c *rPCAuthKeyClient) ReqPq(ctx context.Context, in *TLReqPq, opts ...grpc.CallOption) (*ResPQ, error) {
	out := new(ResPQ)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthKey/req_pq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthKeyClient) ReqPqMulti(ctx context.Context, in *TLReqPqMulti, opts ...grpc.CallOption) (*ResPQ, error) {
	out := new(ResPQ)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthKey/req_pq_multi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthKeyClient) Req_DHParams(ctx context.Context, in *TLReq_DHParams, opts ...grpc.CallOption) (*Server_DH_Params, error) {
	out := new(Server_DH_Params)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthKey/req_DH_params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthKeyClient) SetClient_DHParams(ctx context.Context, in *TLSetClient_DHParams, opts ...grpc.CallOption) (*SetClient_DHParamsAnswer, error) {
	out := new(SetClient_DHParamsAnswer)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthKey/set_client_DH_params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthKeyClient) DestroyAuthKey(ctx context.Context, in *TLDestroyAuthKey, opts ...grpc.CallOption) (*DestroyAuthKeyRes, error) {
	out := new(DestroyAuthKeyRes)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthKey/destroy_auth_key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAuthKeyServer is the server API for RPCAuthKey service.
type RPCAuthKeyServer interface {
	// req_pq#60469778 nonce:int128 = ResPQ;
	ReqPq(context.Context, *TLReqPq) (*ResPQ, error)
	// req_pq_multi#be7e8ef1 nonce:int128 = ResPQ;
	ReqPqMulti(context.Context, *TLReqPqMulti) (*ResPQ, error)
	// req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params;
	Req_DHParams(context.Context, *TLReq_DHParams) (*Server_DH_Params, error)
	// set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;
	SetClient_DHParams(context.Context, *TLSetClient_DHParams) (*SetClient_DHParamsAnswer, error)
	// destroy_auth_key#d1435160 = DestroyAuthKeyRes;
	DestroyAuthKey(context.Context, *TLDestroyAuthKey) (*DestroyAuthKeyRes, error)
}

func RegisterRPCAuthKeyServer(s *grpc.Server, srv RPCAuthKeyServer) {
	s.RegisterService(&_RPCAuthKey_serviceDesc, srv)
}

func _RPCAuthKey_ReqPq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReqPq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).ReqPq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthKey/ReqPq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).ReqPq(ctx, req.(*TLReqPq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthKey_ReqPqMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReqPqMulti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).ReqPqMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthKey/ReqPqMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).ReqPqMulti(ctx, req.(*TLReqPqMulti))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthKey_Req_DHParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReq_DHParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).Req_DHParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthKey/Req_DHParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).Req_DHParams(ctx, req.(*TLReq_DHParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthKey_SetClient_DHParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSetClient_DHParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).SetClient_DHParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthKey/SetClient_DHParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).SetClient_DHParams(ctx, req.(*TLSetClient_DHParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthKey_DestroyAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDestroyAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthKeyServer).DestroyAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthKey/DestroyAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthKeyServer).DestroyAuthKey(ctx, req.(*TLDestroyAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCAuthKey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAuthKey",
	HandlerType: (*RPCAuthKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "req_pq",
			Handler:    _RPCAuthKey_ReqPq_Handler,
		},
		{
			MethodName: "req_pq_multi",
			Handler:    _RPCAuthKey_ReqPqMulti_Handler,
		},
		{
			MethodName: "req_DH_params",
			Handler:    _RPCAuthKey_Req_DHParams_Handler,
		},
		{
			MethodName: "set_client_DH_params",
			Handler:    _RPCAuthKey_SetClient_DHParams_Handler,
		},
		{
			MethodName: "destroy_auth_key",
			Handler:    _RPCAuthKey_DestroyAuthKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.handshake_service.proto",
}

func (m *TLReqPq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReqPq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Constructor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLReqPqMulti) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReqPqMulti) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Constructor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLReq_DHParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReq_DHParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Constructor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ServerNonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ServerNonce)))
		i += copy(dAtA[i:], m.ServerNonce)
	}
	if len(m.P) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.P)))
		i += copy(dAtA[i:], m.P)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.PublicKeyFingerprint != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.PublicKeyFingerprint))
	}
	if len(m.EncryptedData) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.EncryptedData)))
		i += copy(dAtA[i:], m.EncryptedData)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLSetClient_DHParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSetClient_DHParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Constructor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ServerNonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ServerNonce)))
		i += copy(dAtA[i:], m.ServerNonce)
	}
	if len(m.EncryptedData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.EncryptedData)))
		i += copy(dAtA[i:], m.EncryptedData)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLDestroyAuthKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDestroyAuthKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Constructor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Constructor))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSchemaTlHandshakeService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TLReqPq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReqPqMulti) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReq_DHParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.PublicKeyFingerprint != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.PublicKeyFingerprint))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSetClient_DHParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDestroyAuthKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Constructor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSchemaTlHandshakeService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSchemaTlHandshakeService(x uint64) (n int) {
	return sovSchemaTlHandshakeService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TLReqPq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_req_pq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_req_pq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReqPqMulti) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_req_pq_multi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_req_pq_multi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReq_DHParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_req_DH_params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_req_DH_params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyFingerprint", wireType)
			}
			m.PublicKeyFingerprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicKeyFingerprint |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSetClient_DHParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_set_client_DH_params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_set_client_DH_params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDestroyAuthKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_destroy_auth_key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_destroy_auth_key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchemaTlHandshakeService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSchemaTlHandshakeService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSchemaTlHandshakeService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSchemaTlHandshakeService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSchemaTlHandshakeService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchemaTlHandshakeService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("schema.tl.handshake_service.proto", fileDescriptor_schema_tl_handshake_service_a18dae73e07ff2f1)
}

var fileDescriptor_schema_tl_handshake_service_a18dae73e07ff2f1 = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0xfd, 0xab, 0x6e, 0xd3, 0x50, 0x2d, 0xa1, 0x38, 0x16, 0x8a, 0x52, 0x0b, 0xa4,
	0x5c, 0x70, 0xa4, 0x94, 0x03, 0xe2, 0x06, 0x8d, 0xa0, 0x52, 0xa3, 0x12, 0x4c, 0x4e, 0x70, 0x58,
	0x36, 0x9b, 0x69, 0x6c, 0x35, 0xb1, 0x9d, 0xdd, 0x35, 0xc8, 0x6f, 0xc2, 0x7b, 0xf0, 0x12, 0x1c,
	0x79, 0x04, 0x08, 0x2f, 0x80, 0xc4, 0x1d, 0xa1, 0xec, 0x5a, 0x8e, 0xdb, 0xf8, 0x84, 0x2a, 0x71,
	0xf2, 0xce, 0xfc, 0x76, 0xbe, 0x19, 0x7d, 0x3b, 0x32, 0x3e, 0x96, 0xdc, 0x87, 0x19, 0x73, 0xd5,
	0xd4, 0xf5, 0x59, 0x38, 0x96, 0x3e, 0xbb, 0x02, 0x2a, 0x41, 0x7c, 0x0c, 0x38, 0xb8, 0xb1, 0x88,
	0x54, 0x44, 0x76, 0x67, 0x4a, 0x1f, 0xec, 0xc7, 0x93, 0x40, 0xf9, 0xc9, 0xc8, 0xe5, 0xd1, 0xac,
	0x33, 0x89, 0x26, 0x51, 0x47, 0xa7, 0x47, 0xc9, 0xa5, 0x8e, 0x74, 0xa0, 0x4f, 0xa6, 0xce, 0xbe,
	0xb7, 0x92, 0xe6, 0x82, 0x9f, 0x74, 0xb3, 0x74, 0xa3, 0xa4, 0xa3, 0x41, 0xce, 0x7b, 0xbc, 0x37,
	0xec, 0x53, 0x01, 0x73, 0x1a, 0xcf, 0xc9, 0x53, 0xbc, 0xcf, 0xa3, 0x50, 0x2a, 0x91, 0x70, 0x15,
	0x09, 0x0b, 0xb5, 0x50, 0xbb, 0xd6, 0x3d, 0x72, 0xb3, 0x61, 0xdc, 0x61, 0xff, 0x74, 0x45, 0xbd,
	0xe2, 0x55, 0x52, 0xc7, 0xdb, 0x61, 0x14, 0x72, 0xb0, 0x36, 0x5a, 0xa8, 0x5d, 0xf5, 0x4c, 0xe0,
	0x30, 0x7c, 0x27, 0x17, 0xa7, 0xb3, 0x64, 0xaa, 0x82, 0x5b, 0x6f, 0xf1, 0x07, 0xe1, 0xc3, 0xac,
	0x47, 0xef, 0x8c, 0xc6, 0x4c, 0xb0, 0x99, 0xbc, 0xed, 0x26, 0xe4, 0x18, 0x57, 0x97, 0xef, 0x03,
	0x82, 0x1a, 0xb8, 0xa9, 0xe1, 0xbe, 0xc9, 0x5d, 0xe8, 0x2b, 0x55, 0x8c, 0x62, 0x6b, 0xab, 0x85,
	0xda, 0x7b, 0x1e, 0x8a, 0x97, 0xd1, 0xdc, 0xda, 0x36, 0xd1, 0x9c, 0x3c, 0xc1, 0x47, 0x71, 0x32,
	0x9a, 0x06, 0x9c, 0x5e, 0x41, 0x4a, 0x2f, 0x83, 0x70, 0x02, 0x22, 0x16, 0x41, 0xa8, 0xac, 0x9d,
	0x16, 0x6a, 0x6f, 0x7a, 0x75, 0x43, 0xcf, 0x21, 0x7d, 0xb9, 0x62, 0xe4, 0x11, 0xae, 0x41, 0xc8,
	0x45, 0x1a, 0x2b, 0x18, 0xd3, 0x31, 0x53, 0xcc, 0xda, 0xd5, 0x82, 0x07, 0x79, 0xb6, 0xc7, 0x14,
	0x73, 0xbe, 0x20, 0x7c, 0x7f, 0xd8, 0xa7, 0x12, 0x14, 0xe5, 0xd3, 0x00, 0x42, 0xf5, 0x7f, 0x7d,
	0x58, 0x9f, 0x7a, 0xab, 0x6c, 0xea, 0xd7, 0xf8, 0xee, 0xb0, 0x4f, 0xc7, 0x20, 0x95, 0x88, 0x52,
	0xca, 0x12, 0xe5, 0x2f, 0xbd, 0xf9, 0xf7, 0x81, 0xbb, 0xbf, 0x37, 0x30, 0xf6, 0x06, 0xa7, 0xcf,
	0x13, 0xe5, 0x9f, 0x43, 0x4a, 0x5c, 0xbc, 0x93, 0xed, 0x34, 0x29, 0x54, 0x67, 0xab, 0x68, 0xd7,
	0xf2, 0x9c, 0x07, 0x72, 0xf0, 0xc6, 0xa9, 0x90, 0x67, 0xb8, 0x7a, 0x6d, 0x4d, 0xad, 0xf5, 0x2a,
	0x43, 0x4a, 0x6a, 0x5f, 0xe1, 0x83, 0xeb, 0xeb, 0xd7, 0xb8, 0x59, 0x9c, 0x23, 0x7b, 0x85, 0xde,
	0x1a, 0x23, 0x7b, 0x67, 0x74, 0xa0, 0x91, 0x53, 0x21, 0x1f, 0x70, 0xbd, 0xf4, 0x19, 0x5b, 0x45,
	0xbd, 0xb2, 0x1b, 0xf6, 0xc3, 0x82, 0xec, 0x3a, 0xa6, 0x2c, 0x94, 0x9f, 0x40, 0x38, 0x15, 0x72,
	0x81, 0x0f, 0xd7, 0x3c, 0x7f, 0x50, 0x54, 0xbf, 0x49, 0x6d, 0x3b, 0xa7, 0x3d, 0x83, 0x32, 0x87,
	0x3d, 0x90, 0x4e, 0xe5, 0x45, 0xe7, 0xd7, 0x8f, 0x26, 0xfa, 0xba, 0x68, 0xa2, 0x6f, 0x8b, 0x26,
	0xfa, 0xbe, 0x68, 0xa2, 0xcf, 0x3f, 0x9b, 0x95, 0x77, 0x0d, 0xfd, 0x47, 0xe2, 0x3e, 0x53, 0x1d,
	0x3e, 0x4d, 0xa4, 0x02, 0xd1, 0xc9, 0x44, 0x46, 0x3b, 0xfa, 0x73, 0xf2, 0x37, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0xda, 0x77, 0xa5, 0x04, 0x05, 0x00, 0x00,
}
