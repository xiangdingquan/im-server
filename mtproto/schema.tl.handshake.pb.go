// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.tl.handshake.proto

package mtproto // import "open.chat/mtproto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// --------------------------------------------------------------------------------------------
// p_q_inner_data#83c95aec pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 = P_Q_inner_data;
// p_q_inner_data_dc#a9f55f95 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int = P_Q_inner_data;
// p_q_inner_data_temp#3c6a84d4 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 expires_in:int = P_Q_inner_data;
// p_q_inner_data_temp_dc#56fddf88 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int expires_in:int = P_Q_inner_data;
//
// P_Q_inner_data <--
//   - TL_p_q_inner_data
//   - TL_p_q_inner_data_dc
//   - TL_p_q_inner_data_temp
//   - TL_p_q_inner_data_temp_dc
type P_QInnerData struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Pq                   string        `protobuf:"bytes,3,opt,name=pq,proto3" json:"pq,omitempty"`
	P                    string        `protobuf:"bytes,4,opt,name=p,proto3" json:"p,omitempty"`
	Q                    string        `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	Nonce                []byte        `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte        `protobuf:"bytes,7,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	NewNonce             []byte        `protobuf:"bytes,8,opt,name=new_nonce,json=newNonce,proto3" json:"new_nonce,omitempty"`
	Dc                   int32         `protobuf:"varint,9,opt,name=dc,proto3" json:"dc,omitempty"`
	ExpiresIn            int32         `protobuf:"varint,10,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *P_QInnerData) Reset()         { *m = P_QInnerData{} }
func (m *P_QInnerData) String() string { return proto.CompactTextString(m) }
func (*P_QInnerData) ProtoMessage()    {}
func (*P_QInnerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{0}
}
func (m *P_QInnerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *P_QInnerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_P_QInnerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *P_QInnerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P_QInnerData.Merge(dst, src)
}
func (m *P_QInnerData) XXX_Size() int {
	return m.Size()
}
func (m *P_QInnerData) XXX_DiscardUnknown() {
	xxx_messageInfo_P_QInnerData.DiscardUnknown(m)
}

var xxx_messageInfo_P_QInnerData proto.InternalMessageInfo

func (m *P_QInnerData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *P_QInnerData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *P_QInnerData) GetPq() string {
	if m != nil {
		return m.Pq
	}
	return ""
}

func (m *P_QInnerData) GetP() string {
	if m != nil {
		return m.P
	}
	return ""
}

func (m *P_QInnerData) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *P_QInnerData) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *P_QInnerData) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *P_QInnerData) GetNewNonce() []byte {
	if m != nil {
		return m.NewNonce
	}
	return nil
}

func (m *P_QInnerData) GetDc() int32 {
	if m != nil {
		return m.Dc
	}
	return 0
}

func (m *P_QInnerData) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

// TL_p_q_inner_data
type TLPQInnerData struct {
	Data2                *P_QInnerData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLPQInnerData) Reset()         { *m = TLPQInnerData{} }
func (m *TLPQInnerData) String() string { return proto.CompactTextString(m) }
func (*TLPQInnerData) ProtoMessage()    {}
func (*TLPQInnerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{1}
}
func (m *TLPQInnerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPQInnerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPQInnerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLPQInnerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPQInnerData.Merge(dst, src)
}
func (m *TLPQInnerData) XXX_Size() int {
	return m.Size()
}
func (m *TLPQInnerData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPQInnerData.DiscardUnknown(m)
}

var xxx_messageInfo_TLPQInnerData proto.InternalMessageInfo

func (m *TLPQInnerData) GetData2() *P_QInnerData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// TL_p_q_inner_data_dc
type TLPQInnerDataDc struct {
	Data2                *P_QInnerData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLPQInnerDataDc) Reset()         { *m = TLPQInnerDataDc{} }
func (m *TLPQInnerDataDc) String() string { return proto.CompactTextString(m) }
func (*TLPQInnerDataDc) ProtoMessage()    {}
func (*TLPQInnerDataDc) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{2}
}
func (m *TLPQInnerDataDc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPQInnerDataDc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPQInnerDataDc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLPQInnerDataDc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPQInnerDataDc.Merge(dst, src)
}
func (m *TLPQInnerDataDc) XXX_Size() int {
	return m.Size()
}
func (m *TLPQInnerDataDc) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPQInnerDataDc.DiscardUnknown(m)
}

var xxx_messageInfo_TLPQInnerDataDc proto.InternalMessageInfo

func (m *TLPQInnerDataDc) GetData2() *P_QInnerData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// TL_p_q_inner_data_temp
type TLPQInnerDataTemp struct {
	Data2                *P_QInnerData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLPQInnerDataTemp) Reset()         { *m = TLPQInnerDataTemp{} }
func (m *TLPQInnerDataTemp) String() string { return proto.CompactTextString(m) }
func (*TLPQInnerDataTemp) ProtoMessage()    {}
func (*TLPQInnerDataTemp) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{3}
}
func (m *TLPQInnerDataTemp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPQInnerDataTemp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPQInnerDataTemp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLPQInnerDataTemp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPQInnerDataTemp.Merge(dst, src)
}
func (m *TLPQInnerDataTemp) XXX_Size() int {
	return m.Size()
}
func (m *TLPQInnerDataTemp) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPQInnerDataTemp.DiscardUnknown(m)
}

var xxx_messageInfo_TLPQInnerDataTemp proto.InternalMessageInfo

func (m *TLPQInnerDataTemp) GetData2() *P_QInnerData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// TL_p_q_inner_data_temp_dc
type TLPQInnerDataTempDc struct {
	Data2                *P_QInnerData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLPQInnerDataTempDc) Reset()         { *m = TLPQInnerDataTempDc{} }
func (m *TLPQInnerDataTempDc) String() string { return proto.CompactTextString(m) }
func (*TLPQInnerDataTempDc) ProtoMessage()    {}
func (*TLPQInnerDataTempDc) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{4}
}
func (m *TLPQInnerDataTempDc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPQInnerDataTempDc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPQInnerDataTempDc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLPQInnerDataTempDc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPQInnerDataTempDc.Merge(dst, src)
}
func (m *TLPQInnerDataTempDc) XXX_Size() int {
	return m.Size()
}
func (m *TLPQInnerDataTempDc) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPQInnerDataTempDc.DiscardUnknown(m)
}

var xxx_messageInfo_TLPQInnerDataTempDc proto.InternalMessageInfo

func (m *TLPQInnerDataTempDc) GetData2() *P_QInnerData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// bind_auth_key_inner#75a3f765 nonce:long temp_auth_key_id:long perm_auth_key_id:long temp_session_id:long expires_at:int = BindAuthKeyInner;
//
// BindAuthKeyInner <--
//   - TL_bind_auth_key_inner
type BindAuthKeyInner struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                int64         `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TempAuthKeyId        int64         `protobuf:"varint,4,opt,name=temp_auth_key_id,json=tempAuthKeyId,proto3" json:"temp_auth_key_id,omitempty"`
	PermAuthKeyId        int64         `protobuf:"varint,5,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	TempSessionId        int64         `protobuf:"varint,6,opt,name=temp_session_id,json=tempSessionId,proto3" json:"temp_session_id,omitempty"`
	ExpiresAt            int32         `protobuf:"varint,7,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BindAuthKeyInner) Reset()         { *m = BindAuthKeyInner{} }
func (m *BindAuthKeyInner) String() string { return proto.CompactTextString(m) }
func (*BindAuthKeyInner) ProtoMessage()    {}
func (*BindAuthKeyInner) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{5}
}
func (m *BindAuthKeyInner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindAuthKeyInner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindAuthKeyInner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BindAuthKeyInner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindAuthKeyInner.Merge(dst, src)
}
func (m *BindAuthKeyInner) XXX_Size() int {
	return m.Size()
}
func (m *BindAuthKeyInner) XXX_DiscardUnknown() {
	xxx_messageInfo_BindAuthKeyInner.DiscardUnknown(m)
}

var xxx_messageInfo_BindAuthKeyInner proto.InternalMessageInfo

func (m *BindAuthKeyInner) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *BindAuthKeyInner) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *BindAuthKeyInner) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BindAuthKeyInner) GetTempAuthKeyId() int64 {
	if m != nil {
		return m.TempAuthKeyId
	}
	return 0
}

func (m *BindAuthKeyInner) GetPermAuthKeyId() int64 {
	if m != nil {
		return m.PermAuthKeyId
	}
	return 0
}

func (m *BindAuthKeyInner) GetTempSessionId() int64 {
	if m != nil {
		return m.TempSessionId
	}
	return 0
}

func (m *BindAuthKeyInner) GetExpiresAt() int32 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

// TL_bind_auth_key_inner
type TLBindAuthKeyInner struct {
	Data2                *BindAuthKeyInner `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLBindAuthKeyInner) Reset()         { *m = TLBindAuthKeyInner{} }
func (m *TLBindAuthKeyInner) String() string { return proto.CompactTextString(m) }
func (*TLBindAuthKeyInner) ProtoMessage()    {}
func (*TLBindAuthKeyInner) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{6}
}
func (m *TLBindAuthKeyInner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLBindAuthKeyInner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLBindAuthKeyInner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLBindAuthKeyInner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLBindAuthKeyInner.Merge(dst, src)
}
func (m *TLBindAuthKeyInner) XXX_Size() int {
	return m.Size()
}
func (m *TLBindAuthKeyInner) XXX_DiscardUnknown() {
	xxx_messageInfo_TLBindAuthKeyInner.DiscardUnknown(m)
}

var xxx_messageInfo_TLBindAuthKeyInner proto.InternalMessageInfo

func (m *TLBindAuthKeyInner) GetData2() *BindAuthKeyInner {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// server_DH_params_fail#79cb045d nonce:int128 server_nonce:int128 new_nonce_hash:int128 = Server_DH_Params;
// server_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:string = Server_DH_Params;
//
// Server_DH_Params <--
//   - TL_server_DH_params_fail
//   - TL_server_DH_params_ok
type Server_DH_Params struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte        `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	NewNonceHash         []byte        `protobuf:"bytes,5,opt,name=new_nonce_hash,json=newNonceHash,proto3" json:"new_nonce_hash,omitempty"`
	EncryptedAnswer      string        `protobuf:"bytes,6,opt,name=encrypted_answer,json=encryptedAnswer,proto3" json:"encrypted_answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Server_DH_Params) Reset()         { *m = Server_DH_Params{} }
func (m *Server_DH_Params) String() string { return proto.CompactTextString(m) }
func (*Server_DH_Params) ProtoMessage()    {}
func (*Server_DH_Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{7}
}
func (m *Server_DH_Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Server_DH_Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Server_DH_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Server_DH_Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server_DH_Params.Merge(dst, src)
}
func (m *Server_DH_Params) XXX_Size() int {
	return m.Size()
}
func (m *Server_DH_Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Server_DH_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Server_DH_Params proto.InternalMessageInfo

func (m *Server_DH_Params) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *Server_DH_Params) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *Server_DH_Params) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Server_DH_Params) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *Server_DH_Params) GetNewNonceHash() []byte {
	if m != nil {
		return m.NewNonceHash
	}
	return nil
}

func (m *Server_DH_Params) GetEncryptedAnswer() string {
	if m != nil {
		return m.EncryptedAnswer
	}
	return ""
}

// TL_server_DH_params_fail
type TLServer_DHParamsFail struct {
	Data2                *Server_DH_Params `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLServer_DHParamsFail) Reset()         { *m = TLServer_DHParamsFail{} }
func (m *TLServer_DHParamsFail) String() string { return proto.CompactTextString(m) }
func (*TLServer_DHParamsFail) ProtoMessage()    {}
func (*TLServer_DHParamsFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{8}
}
func (m *TLServer_DHParamsFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLServer_DHParamsFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLServer_DHParamsFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLServer_DHParamsFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLServer_DHParamsFail.Merge(dst, src)
}
func (m *TLServer_DHParamsFail) XXX_Size() int {
	return m.Size()
}
func (m *TLServer_DHParamsFail) XXX_DiscardUnknown() {
	xxx_messageInfo_TLServer_DHParamsFail.DiscardUnknown(m)
}

var xxx_messageInfo_TLServer_DHParamsFail proto.InternalMessageInfo

func (m *TLServer_DHParamsFail) GetData2() *Server_DH_Params {
	if m != nil {
		return m.Data2
	}
	return nil
}

// TL_server_DH_params_ok
type TLServer_DHParamsOk struct {
	Data2                *Server_DH_Params `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLServer_DHParamsOk) Reset()         { *m = TLServer_DHParamsOk{} }
func (m *TLServer_DHParamsOk) String() string { return proto.CompactTextString(m) }
func (*TLServer_DHParamsOk) ProtoMessage()    {}
func (*TLServer_DHParamsOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{9}
}
func (m *TLServer_DHParamsOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLServer_DHParamsOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLServer_DHParamsOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLServer_DHParamsOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLServer_DHParamsOk.Merge(dst, src)
}
func (m *TLServer_DHParamsOk) XXX_Size() int {
	return m.Size()
}
func (m *TLServer_DHParamsOk) XXX_DiscardUnknown() {
	xxx_messageInfo_TLServer_DHParamsOk.DiscardUnknown(m)
}

var xxx_messageInfo_TLServer_DHParamsOk proto.InternalMessageInfo

func (m *TLServer_DHParamsOk) GetData2() *Server_DH_Params {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// server_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:string g_a:string server_time:int = Server_DH_inner_data;
//
// Server_DH_inner_data <--
//   - TL_server_DH_inner_data
type Server_DHInnerData struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte        `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	G                    int32         `protobuf:"varint,5,opt,name=g,proto3" json:"g,omitempty"`
	DhPrime              string        `protobuf:"bytes,6,opt,name=dh_prime,json=dhPrime,proto3" json:"dh_prime,omitempty"`
	GA                   string        `protobuf:"bytes,7,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`
	ServerTime           int32         `protobuf:"varint,8,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Server_DHInnerData) Reset()         { *m = Server_DHInnerData{} }
func (m *Server_DHInnerData) String() string { return proto.CompactTextString(m) }
func (*Server_DHInnerData) ProtoMessage()    {}
func (*Server_DHInnerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{10}
}
func (m *Server_DHInnerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Server_DHInnerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Server_DHInnerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Server_DHInnerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server_DHInnerData.Merge(dst, src)
}
func (m *Server_DHInnerData) XXX_Size() int {
	return m.Size()
}
func (m *Server_DHInnerData) XXX_DiscardUnknown() {
	xxx_messageInfo_Server_DHInnerData.DiscardUnknown(m)
}

var xxx_messageInfo_Server_DHInnerData proto.InternalMessageInfo

func (m *Server_DHInnerData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *Server_DHInnerData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *Server_DHInnerData) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Server_DHInnerData) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *Server_DHInnerData) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *Server_DHInnerData) GetDhPrime() string {
	if m != nil {
		return m.DhPrime
	}
	return ""
}

func (m *Server_DHInnerData) GetGA() string {
	if m != nil {
		return m.GA
	}
	return ""
}

func (m *Server_DHInnerData) GetServerTime() int32 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

// TL_server_DH_inner_data
type TLServer_DHInnerData struct {
	Data2                *Server_DHInnerData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLServer_DHInnerData) Reset()         { *m = TLServer_DHInnerData{} }
func (m *TLServer_DHInnerData) String() string { return proto.CompactTextString(m) }
func (*TLServer_DHInnerData) ProtoMessage()    {}
func (*TLServer_DHInnerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{11}
}
func (m *TLServer_DHInnerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLServer_DHInnerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLServer_DHInnerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLServer_DHInnerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLServer_DHInnerData.Merge(dst, src)
}
func (m *TLServer_DHInnerData) XXX_Size() int {
	return m.Size()
}
func (m *TLServer_DHInnerData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLServer_DHInnerData.DiscardUnknown(m)
}

var xxx_messageInfo_TLServer_DHInnerData proto.InternalMessageInfo

func (m *TLServer_DHInnerData) GetData2() *Server_DHInnerData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data;
//
// Client_DH_Inner_Data <--
//   - TL_client_DH_inner_data
type Client_DH_Inner_Data struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte        `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	RetryId              int64         `protobuf:"varint,5,opt,name=retry_id,json=retryId,proto3" json:"retry_id,omitempty"`
	GB                   string        `protobuf:"bytes,6,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Client_DH_Inner_Data) Reset()         { *m = Client_DH_Inner_Data{} }
func (m *Client_DH_Inner_Data) String() string { return proto.CompactTextString(m) }
func (*Client_DH_Inner_Data) ProtoMessage()    {}
func (*Client_DH_Inner_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{12}
}
func (m *Client_DH_Inner_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Client_DH_Inner_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Client_DH_Inner_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Client_DH_Inner_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client_DH_Inner_Data.Merge(dst, src)
}
func (m *Client_DH_Inner_Data) XXX_Size() int {
	return m.Size()
}
func (m *Client_DH_Inner_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Client_DH_Inner_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Client_DH_Inner_Data proto.InternalMessageInfo

func (m *Client_DH_Inner_Data) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *Client_DH_Inner_Data) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *Client_DH_Inner_Data) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Client_DH_Inner_Data) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *Client_DH_Inner_Data) GetRetryId() int64 {
	if m != nil {
		return m.RetryId
	}
	return 0
}

func (m *Client_DH_Inner_Data) GetGB() string {
	if m != nil {
		return m.GB
	}
	return ""
}

// TL_client_DH_inner_data
type TLClient_DHInnerData struct {
	Data2                *Client_DH_Inner_Data `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLClient_DHInnerData) Reset()         { *m = TLClient_DHInnerData{} }
func (m *TLClient_DHInnerData) String() string { return proto.CompactTextString(m) }
func (*TLClient_DHInnerData) ProtoMessage()    {}
func (*TLClient_DHInnerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{13}
}
func (m *TLClient_DHInnerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLClient_DHInnerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLClient_DHInnerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLClient_DHInnerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLClient_DHInnerData.Merge(dst, src)
}
func (m *TLClient_DHInnerData) XXX_Size() int {
	return m.Size()
}
func (m *TLClient_DHInnerData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLClient_DHInnerData.DiscardUnknown(m)
}

var xxx_messageInfo_TLClient_DHInnerData proto.InternalMessageInfo

func (m *TLClient_DHInnerData) GetData2() *Client_DH_Inner_Data {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// dh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;
// dh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer;
// dh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer;
//
// Set_client_DH_params_answer <--
//   - TL_dh_gen_ok
//   - TL_dh_gen_retry
//   - TL_dh_gen_fail
type SetClient_DHParamsAnswer struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte        `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	NewNonceHash1        []byte        `protobuf:"bytes,5,opt,name=new_nonce_hash1,json=newNonceHash1,proto3" json:"new_nonce_hash1,omitempty"`
	NewNonceHash2        []byte        `protobuf:"bytes,6,opt,name=new_nonce_hash2,json=newNonceHash2,proto3" json:"new_nonce_hash2,omitempty"`
	NewNonceHash3        []byte        `protobuf:"bytes,7,opt,name=new_nonce_hash3,json=newNonceHash3,proto3" json:"new_nonce_hash3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetClient_DHParamsAnswer) Reset()         { *m = SetClient_DHParamsAnswer{} }
func (m *SetClient_DHParamsAnswer) String() string { return proto.CompactTextString(m) }
func (*SetClient_DHParamsAnswer) ProtoMessage()    {}
func (*SetClient_DHParamsAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{14}
}
func (m *SetClient_DHParamsAnswer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetClient_DHParamsAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetClient_DHParamsAnswer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetClient_DHParamsAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetClient_DHParamsAnswer.Merge(dst, src)
}
func (m *SetClient_DHParamsAnswer) XXX_Size() int {
	return m.Size()
}
func (m *SetClient_DHParamsAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_SetClient_DHParamsAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_SetClient_DHParamsAnswer proto.InternalMessageInfo

func (m *SetClient_DHParamsAnswer) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *SetClient_DHParamsAnswer) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *SetClient_DHParamsAnswer) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *SetClient_DHParamsAnswer) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *SetClient_DHParamsAnswer) GetNewNonceHash1() []byte {
	if m != nil {
		return m.NewNonceHash1
	}
	return nil
}

func (m *SetClient_DHParamsAnswer) GetNewNonceHash2() []byte {
	if m != nil {
		return m.NewNonceHash2
	}
	return nil
}

func (m *SetClient_DHParamsAnswer) GetNewNonceHash3() []byte {
	if m != nil {
		return m.NewNonceHash3
	}
	return nil
}

// TL_dh_gen_ok
type TLDhGenOk struct {
	Data2                *SetClient_DHParamsAnswer `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TLDhGenOk) Reset()         { *m = TLDhGenOk{} }
func (m *TLDhGenOk) String() string { return proto.CompactTextString(m) }
func (*TLDhGenOk) ProtoMessage()    {}
func (*TLDhGenOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{15}
}
func (m *TLDhGenOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDhGenOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDhGenOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLDhGenOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDhGenOk.Merge(dst, src)
}
func (m *TLDhGenOk) XXX_Size() int {
	return m.Size()
}
func (m *TLDhGenOk) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDhGenOk.DiscardUnknown(m)
}

var xxx_messageInfo_TLDhGenOk proto.InternalMessageInfo

func (m *TLDhGenOk) GetData2() *SetClient_DHParamsAnswer {
	if m != nil {
		return m.Data2
	}
	return nil
}

// TL_dh_gen_retry
type TLDhGenRetry struct {
	Data2                *SetClient_DHParamsAnswer `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TLDhGenRetry) Reset()         { *m = TLDhGenRetry{} }
func (m *TLDhGenRetry) String() string { return proto.CompactTextString(m) }
func (*TLDhGenRetry) ProtoMessage()    {}
func (*TLDhGenRetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{16}
}
func (m *TLDhGenRetry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDhGenRetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDhGenRetry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLDhGenRetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDhGenRetry.Merge(dst, src)
}
func (m *TLDhGenRetry) XXX_Size() int {
	return m.Size()
}
func (m *TLDhGenRetry) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDhGenRetry.DiscardUnknown(m)
}

var xxx_messageInfo_TLDhGenRetry proto.InternalMessageInfo

func (m *TLDhGenRetry) GetData2() *SetClient_DHParamsAnswer {
	if m != nil {
		return m.Data2
	}
	return nil
}

// TL_dh_gen_fail
type TLDhGenFail struct {
	Data2                *SetClient_DHParamsAnswer `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TLDhGenFail) Reset()         { *m = TLDhGenFail{} }
func (m *TLDhGenFail) String() string { return proto.CompactTextString(m) }
func (*TLDhGenFail) ProtoMessage()    {}
func (*TLDhGenFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{17}
}
func (m *TLDhGenFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDhGenFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDhGenFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLDhGenFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDhGenFail.Merge(dst, src)
}
func (m *TLDhGenFail) XXX_Size() int {
	return m.Size()
}
func (m *TLDhGenFail) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDhGenFail.DiscardUnknown(m)
}

var xxx_messageInfo_TLDhGenFail proto.InternalMessageInfo

func (m *TLDhGenFail) GetData2() *SetClient_DHParamsAnswer {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// destroy_auth_key_ok#f660e1d4 = DestroyAuthKeyRes;
// destroy_auth_key_none#0a9f2259 = DestroyAuthKeyRes;
// destroy_auth_key_fail#ea109b13 = DestroyAuthKeyRes;
//
// DestroyAuthKeyRes <--
//   - TL_destroy_auth_key_ok
//   - TL_destroy_auth_key_none
//   - TL_destroy_auth_key_fail
type DestroyAuthKeyRes struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DestroyAuthKeyRes) Reset()         { *m = DestroyAuthKeyRes{} }
func (m *DestroyAuthKeyRes) String() string { return proto.CompactTextString(m) }
func (*DestroyAuthKeyRes) ProtoMessage()    {}
func (*DestroyAuthKeyRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{18}
}
func (m *DestroyAuthKeyRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DestroyAuthKeyRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DestroyAuthKeyRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DestroyAuthKeyRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestroyAuthKeyRes.Merge(dst, src)
}
func (m *DestroyAuthKeyRes) XXX_Size() int {
	return m.Size()
}
func (m *DestroyAuthKeyRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DestroyAuthKeyRes.DiscardUnknown(m)
}

var xxx_messageInfo_DestroyAuthKeyRes proto.InternalMessageInfo

func (m *DestroyAuthKeyRes) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *DestroyAuthKeyRes) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

// TL_destroy_auth_key_ok
type TLDestroyAuthKeyOk struct {
	Data2                *DestroyAuthKeyRes `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLDestroyAuthKeyOk) Reset()         { *m = TLDestroyAuthKeyOk{} }
func (m *TLDestroyAuthKeyOk) String() string { return proto.CompactTextString(m) }
func (*TLDestroyAuthKeyOk) ProtoMessage()    {}
func (*TLDestroyAuthKeyOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{19}
}
func (m *TLDestroyAuthKeyOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDestroyAuthKeyOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDestroyAuthKeyOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLDestroyAuthKeyOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDestroyAuthKeyOk.Merge(dst, src)
}
func (m *TLDestroyAuthKeyOk) XXX_Size() int {
	return m.Size()
}
func (m *TLDestroyAuthKeyOk) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDestroyAuthKeyOk.DiscardUnknown(m)
}

var xxx_messageInfo_TLDestroyAuthKeyOk proto.InternalMessageInfo

func (m *TLDestroyAuthKeyOk) GetData2() *DestroyAuthKeyRes {
	if m != nil {
		return m.Data2
	}
	return nil
}

// TL_destroy_auth_key_none
type TLDestroyAuthKeyNone struct {
	Data2                *DestroyAuthKeyRes `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLDestroyAuthKeyNone) Reset()         { *m = TLDestroyAuthKeyNone{} }
func (m *TLDestroyAuthKeyNone) String() string { return proto.CompactTextString(m) }
func (*TLDestroyAuthKeyNone) ProtoMessage()    {}
func (*TLDestroyAuthKeyNone) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{20}
}
func (m *TLDestroyAuthKeyNone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDestroyAuthKeyNone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDestroyAuthKeyNone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLDestroyAuthKeyNone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDestroyAuthKeyNone.Merge(dst, src)
}
func (m *TLDestroyAuthKeyNone) XXX_Size() int {
	return m.Size()
}
func (m *TLDestroyAuthKeyNone) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDestroyAuthKeyNone.DiscardUnknown(m)
}

var xxx_messageInfo_TLDestroyAuthKeyNone proto.InternalMessageInfo

func (m *TLDestroyAuthKeyNone) GetData2() *DestroyAuthKeyRes {
	if m != nil {
		return m.Data2
	}
	return nil
}

// TL_destroy_auth_key_fail
type TLDestroyAuthKeyFail struct {
	Data2                *DestroyAuthKeyRes `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLDestroyAuthKeyFail) Reset()         { *m = TLDestroyAuthKeyFail{} }
func (m *TLDestroyAuthKeyFail) String() string { return proto.CompactTextString(m) }
func (*TLDestroyAuthKeyFail) ProtoMessage()    {}
func (*TLDestroyAuthKeyFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{21}
}
func (m *TLDestroyAuthKeyFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDestroyAuthKeyFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDestroyAuthKeyFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLDestroyAuthKeyFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDestroyAuthKeyFail.Merge(dst, src)
}
func (m *TLDestroyAuthKeyFail) XXX_Size() int {
	return m.Size()
}
func (m *TLDestroyAuthKeyFail) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDestroyAuthKeyFail.DiscardUnknown(m)
}

var xxx_messageInfo_TLDestroyAuthKeyFail proto.InternalMessageInfo

func (m *TLDestroyAuthKeyFail) GetData2() *DestroyAuthKeyRes {
	if m != nil {
		return m.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// resPQ#05162463 nonce:int128 server_nonce:int128 pq:string server_public_key_fingerprints:Vector<long> = ResPQ;
//
// ResPQ <--
//   - TL_resPQ
type ResPQ struct {
	PredicateName               string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor                 TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce                       []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce                 []byte        `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	Pq                          string        `protobuf:"bytes,5,opt,name=pq,proto3" json:"pq,omitempty"`
	ServerPublicKeyFingerprints []int64       `protobuf:"varint,6,rep,packed,name=server_public_key_fingerprints,json=serverPublicKeyFingerprints,proto3" json:"server_public_key_fingerprints,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}      `json:"-"`
	XXX_unrecognized            []byte        `json:"-"`
	XXX_sizecache               int32         `json:"-"`
}

func (m *ResPQ) Reset()         { *m = ResPQ{} }
func (m *ResPQ) String() string { return proto.CompactTextString(m) }
func (*ResPQ) ProtoMessage()    {}
func (*ResPQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{22}
}
func (m *ResPQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResPQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResPQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResPQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResPQ.Merge(dst, src)
}
func (m *ResPQ) XXX_Size() int {
	return m.Size()
}
func (m *ResPQ) XXX_DiscardUnknown() {
	xxx_messageInfo_ResPQ.DiscardUnknown(m)
}

var xxx_messageInfo_ResPQ proto.InternalMessageInfo

func (m *ResPQ) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *ResPQ) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *ResPQ) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *ResPQ) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *ResPQ) GetPq() string {
	if m != nil {
		return m.Pq
	}
	return ""
}

func (m *ResPQ) GetServerPublicKeyFingerprints() []int64 {
	if m != nil {
		return m.ServerPublicKeyFingerprints
	}
	return nil
}

// TL_resPQ
type TLResPQ struct {
	Data2                *ResPQ   `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLResPQ) Reset()         { *m = TLResPQ{} }
func (m *TLResPQ) String() string { return proto.CompactTextString(m) }
func (*TLResPQ) ProtoMessage()    {}
func (*TLResPQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_tl_handshake_6d3928bde9719f3c, []int{23}
}
func (m *TLResPQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLResPQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLResPQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TLResPQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLResPQ.Merge(dst, src)
}
func (m *TLResPQ) XXX_Size() int {
	return m.Size()
}
func (m *TLResPQ) XXX_DiscardUnknown() {
	xxx_messageInfo_TLResPQ.DiscardUnknown(m)
}

var xxx_messageInfo_TLResPQ proto.InternalMessageInfo

func (m *TLResPQ) GetData2() *ResPQ {
	if m != nil {
		return m.Data2
	}
	return nil
}

func init() {
	proto.RegisterType((*P_QInnerData)(nil), "mtproto.P_Q_inner_data")
	proto.RegisterType((*TLPQInnerData)(nil), "mtproto.TL_p_q_inner_data")
	proto.RegisterType((*TLPQInnerDataDc)(nil), "mtproto.TL_p_q_inner_data_dc")
	proto.RegisterType((*TLPQInnerDataTemp)(nil), "mtproto.TL_p_q_inner_data_temp")
	proto.RegisterType((*TLPQInnerDataTempDc)(nil), "mtproto.TL_p_q_inner_data_temp_dc")
	proto.RegisterType((*BindAuthKeyInner)(nil), "mtproto.BindAuthKeyInner")
	proto.RegisterType((*TLBindAuthKeyInner)(nil), "mtproto.TL_bind_auth_key_inner")
	proto.RegisterType((*Server_DH_Params)(nil), "mtproto.Server_DH_Params")
	proto.RegisterType((*TLServer_DHParamsFail)(nil), "mtproto.TL_server_DH_params_fail")
	proto.RegisterType((*TLServer_DHParamsOk)(nil), "mtproto.TL_server_DH_params_ok")
	proto.RegisterType((*Server_DHInnerData)(nil), "mtproto.Server_DH_inner_data")
	proto.RegisterType((*TLServer_DHInnerData)(nil), "mtproto.TL_server_DH_inner_data")
	proto.RegisterType((*Client_DH_Inner_Data)(nil), "mtproto.Client_DH_Inner_Data")
	proto.RegisterType((*TLClient_DHInnerData)(nil), "mtproto.TL_client_DH_inner_data")
	proto.RegisterType((*SetClient_DHParamsAnswer)(nil), "mtproto.Set_client_DH_params_answer")
	proto.RegisterType((*TLDhGenOk)(nil), "mtproto.TL_dh_gen_ok")
	proto.RegisterType((*TLDhGenRetry)(nil), "mtproto.TL_dh_gen_retry")
	proto.RegisterType((*TLDhGenFail)(nil), "mtproto.TL_dh_gen_fail")
	proto.RegisterType((*DestroyAuthKeyRes)(nil), "mtproto.DestroyAuthKeyRes")
	proto.RegisterType((*TLDestroyAuthKeyOk)(nil), "mtproto.TL_destroy_auth_key_ok")
	proto.RegisterType((*TLDestroyAuthKeyNone)(nil), "mtproto.TL_destroy_auth_key_none")
	proto.RegisterType((*TLDestroyAuthKeyFail)(nil), "mtproto.TL_destroy_auth_key_fail")
	proto.RegisterType((*ResPQ)(nil), "mtproto.ResPQ")
	proto.RegisterType((*TLResPQ)(nil), "mtproto.TL_resPQ")
}
func (this *P_QInnerData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&mtproto.P_QInnerData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Pq: "+fmt.Sprintf("%#v", this.Pq)+",\n")
	s = append(s, "P: "+fmt.Sprintf("%#v", this.P)+",\n")
	s = append(s, "Q: "+fmt.Sprintf("%#v", this.Q)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "NewNonce: "+fmt.Sprintf("%#v", this.NewNonce)+",\n")
	s = append(s, "Dc: "+fmt.Sprintf("%#v", this.Dc)+",\n")
	s = append(s, "ExpiresIn: "+fmt.Sprintf("%#v", this.ExpiresIn)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLPQInnerData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLPQInnerData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLPQInnerDataDc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLPQInnerDataDc{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLPQInnerDataTemp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLPQInnerDataTemp{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLPQInnerDataTempDc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLPQInnerDataTempDc{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BindAuthKeyInner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&mtproto.BindAuthKeyInner{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "TempAuthKeyId: "+fmt.Sprintf("%#v", this.TempAuthKeyId)+",\n")
	s = append(s, "PermAuthKeyId: "+fmt.Sprintf("%#v", this.PermAuthKeyId)+",\n")
	s = append(s, "TempSessionId: "+fmt.Sprintf("%#v", this.TempSessionId)+",\n")
	s = append(s, "ExpiresAt: "+fmt.Sprintf("%#v", this.ExpiresAt)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLBindAuthKeyInner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLBindAuthKeyInner{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Server_DH_Params) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&mtproto.Server_DH_Params{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "NewNonceHash: "+fmt.Sprintf("%#v", this.NewNonceHash)+",\n")
	s = append(s, "EncryptedAnswer: "+fmt.Sprintf("%#v", this.EncryptedAnswer)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLServer_DHParamsFail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLServer_DHParamsFail{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLServer_DHParamsOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLServer_DHParamsOk{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Server_DHInnerData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&mtproto.Server_DHInnerData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "G: "+fmt.Sprintf("%#v", this.G)+",\n")
	s = append(s, "DhPrime: "+fmt.Sprintf("%#v", this.DhPrime)+",\n")
	s = append(s, "GA: "+fmt.Sprintf("%#v", this.GA)+",\n")
	s = append(s, "ServerTime: "+fmt.Sprintf("%#v", this.ServerTime)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLServer_DHInnerData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLServer_DHInnerData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Client_DH_Inner_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&mtproto.Client_DH_Inner_Data{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "RetryId: "+fmt.Sprintf("%#v", this.RetryId)+",\n")
	s = append(s, "GB: "+fmt.Sprintf("%#v", this.GB)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLClient_DHInnerData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLClient_DHInnerData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetClient_DHParamsAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&mtproto.SetClient_DHParamsAnswer{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "NewNonceHash1: "+fmt.Sprintf("%#v", this.NewNonceHash1)+",\n")
	s = append(s, "NewNonceHash2: "+fmt.Sprintf("%#v", this.NewNonceHash2)+",\n")
	s = append(s, "NewNonceHash3: "+fmt.Sprintf("%#v", this.NewNonceHash3)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDhGenOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLDhGenOk{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDhGenRetry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLDhGenRetry{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDhGenFail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLDhGenFail{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DestroyAuthKeyRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&mtproto.DestroyAuthKeyRes{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDestroyAuthKeyOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLDestroyAuthKeyOk{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDestroyAuthKeyNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLDestroyAuthKeyNone{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDestroyAuthKeyFail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLDestroyAuthKeyFail{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResPQ) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&mtproto.ResPQ{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "Pq: "+fmt.Sprintf("%#v", this.Pq)+",\n")
	s = append(s, "ServerPublicKeyFingerprints: "+fmt.Sprintf("%#v", this.ServerPublicKeyFingerprints)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLResPQ) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mtproto.TLResPQ{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSchemaTlHandshake(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *P_QInnerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P_QInnerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PredicateName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.PredicateName)))
		i += copy(dAtA[i:], m.PredicateName)
	}
	if m.Constructor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Pq) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Pq)))
		i += copy(dAtA[i:], m.Pq)
	}
	if len(m.P) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.P)))
		i += copy(dAtA[i:], m.P)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ServerNonce) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.ServerNonce)))
		i += copy(dAtA[i:], m.ServerNonce)
	}
	if len(m.NewNonce) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.NewNonce)))
		i += copy(dAtA[i:], m.NewNonce)
	}
	if m.Dc != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Dc))
	}
	if m.ExpiresIn != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.ExpiresIn))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLPQInnerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPQInnerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n1, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLPQInnerDataDc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPQInnerDataDc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n2, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLPQInnerDataTemp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPQInnerDataTemp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n3, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLPQInnerDataTempDc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPQInnerDataTempDc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n4, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BindAuthKeyInner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindAuthKeyInner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PredicateName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.PredicateName)))
		i += copy(dAtA[i:], m.PredicateName)
	}
	if m.Constructor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Constructor))
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Nonce))
	}
	if m.TempAuthKeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.TempAuthKeyId))
	}
	if m.PermAuthKeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.PermAuthKeyId))
	}
	if m.TempSessionId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.TempSessionId))
	}
	if m.ExpiresAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.ExpiresAt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLBindAuthKeyInner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLBindAuthKeyInner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n5, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Server_DH_Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Server_DH_Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PredicateName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.PredicateName)))
		i += copy(dAtA[i:], m.PredicateName)
	}
	if m.Constructor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ServerNonce) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.ServerNonce)))
		i += copy(dAtA[i:], m.ServerNonce)
	}
	if len(m.NewNonceHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.NewNonceHash)))
		i += copy(dAtA[i:], m.NewNonceHash)
	}
	if len(m.EncryptedAnswer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.EncryptedAnswer)))
		i += copy(dAtA[i:], m.EncryptedAnswer)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLServer_DHParamsFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLServer_DHParamsFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n6, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLServer_DHParamsOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLServer_DHParamsOk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n7, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Server_DHInnerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Server_DHInnerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PredicateName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.PredicateName)))
		i += copy(dAtA[i:], m.PredicateName)
	}
	if m.Constructor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ServerNonce) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.ServerNonce)))
		i += copy(dAtA[i:], m.ServerNonce)
	}
	if m.G != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.G))
	}
	if len(m.DhPrime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.DhPrime)))
		i += copy(dAtA[i:], m.DhPrime)
	}
	if len(m.GA) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.GA)))
		i += copy(dAtA[i:], m.GA)
	}
	if m.ServerTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.ServerTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLServer_DHInnerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLServer_DHInnerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n8, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Client_DH_Inner_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client_DH_Inner_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PredicateName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.PredicateName)))
		i += copy(dAtA[i:], m.PredicateName)
	}
	if m.Constructor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ServerNonce) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.ServerNonce)))
		i += copy(dAtA[i:], m.ServerNonce)
	}
	if m.RetryId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.RetryId))
	}
	if len(m.GB) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.GB)))
		i += copy(dAtA[i:], m.GB)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLClient_DHInnerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLClient_DHInnerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n9, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetClient_DHParamsAnswer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetClient_DHParamsAnswer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PredicateName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.PredicateName)))
		i += copy(dAtA[i:], m.PredicateName)
	}
	if m.Constructor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ServerNonce) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.ServerNonce)))
		i += copy(dAtA[i:], m.ServerNonce)
	}
	if len(m.NewNonceHash1) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.NewNonceHash1)))
		i += copy(dAtA[i:], m.NewNonceHash1)
	}
	if len(m.NewNonceHash2) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.NewNonceHash2)))
		i += copy(dAtA[i:], m.NewNonceHash2)
	}
	if len(m.NewNonceHash3) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.NewNonceHash3)))
		i += copy(dAtA[i:], m.NewNonceHash3)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLDhGenOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDhGenOk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n10, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLDhGenRetry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDhGenRetry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n11, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLDhGenFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDhGenFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n12, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DestroyAuthKeyRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroyAuthKeyRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PredicateName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.PredicateName)))
		i += copy(dAtA[i:], m.PredicateName)
	}
	if m.Constructor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Constructor))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLDestroyAuthKeyOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDestroyAuthKeyOk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n13, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLDestroyAuthKeyNone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDestroyAuthKeyNone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n14, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLDestroyAuthKeyFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDestroyAuthKeyFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n15, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResPQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResPQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PredicateName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.PredicateName)))
		i += copy(dAtA[i:], m.PredicateName)
	}
	if m.Constructor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Constructor))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.ServerNonce) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.ServerNonce)))
		i += copy(dAtA[i:], m.ServerNonce)
	}
	if len(m.Pq) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(len(m.Pq)))
		i += copy(dAtA[i:], m.Pq)
	}
	if len(m.ServerPublicKeyFingerprints) > 0 {
		dAtA17 := make([]byte, len(m.ServerPublicKeyFingerprints)*10)
		var j16 int
		for _, num1 := range m.ServerPublicKeyFingerprints {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TLResPQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLResPQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchemaTlHandshake(dAtA, i, uint64(m.Data2.Size()))
		n18, err := m.Data2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSchemaTlHandshake(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *P_QInnerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Constructor))
	}
	l = len(m.Pq)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.NewNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Dc != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Dc))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.ExpiresIn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLPQInnerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLPQInnerDataDc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLPQInnerDataTemp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLPQInnerDataTempDc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindAuthKeyInner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Constructor))
	}
	if m.Nonce != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Nonce))
	}
	if m.TempAuthKeyId != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.TempAuthKeyId))
	}
	if m.PermAuthKeyId != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.PermAuthKeyId))
	}
	if m.TempSessionId != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.TempSessionId))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.ExpiresAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLBindAuthKeyInner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Server_DH_Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.NewNonceHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.EncryptedAnswer)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLServer_DHParamsFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLServer_DHParamsOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Server_DHInnerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.G != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.G))
	}
	l = len(m.DhPrime)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.GA)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.ServerTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLServer_DHInnerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Client_DH_Inner_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.RetryId != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.RetryId))
	}
	l = len(m.GB)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLClient_DHInnerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetClient_DHParamsAnswer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.NewNonceHash1)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.NewNonceHash2)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.NewNonceHash3)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDhGenOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDhGenRetry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDhGenFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DestroyAuthKeyRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Constructor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDestroyAuthKeyOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDestroyAuthKeyNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDestroyAuthKeyFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResPQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSchemaTlHandshake(uint64(m.Constructor))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	l = len(m.Pq)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if len(m.ServerPublicKeyFingerprints) > 0 {
		l = 0
		for _, e := range m.ServerPublicKeyFingerprints {
			l += sovSchemaTlHandshake(uint64(e))
		}
		n += 1 + sovSchemaTlHandshake(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLResPQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSchemaTlHandshake(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSchemaTlHandshake(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSchemaTlHandshake(x uint64) (n int) {
	return sovSchemaTlHandshake(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *P_QInnerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P_Q_inner_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P_Q_inner_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNonce = append(m.NewNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.NewNonce == nil {
				m.NewNonce = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dc", wireType)
			}
			m.Dc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dc |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPQInnerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_p_q_inner_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_p_q_inner_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &P_QInnerData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPQInnerDataDc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_p_q_inner_data_dc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_p_q_inner_data_dc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &P_QInnerData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPQInnerDataTemp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_p_q_inner_data_temp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_p_q_inner_data_temp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &P_QInnerData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPQInnerDataTempDc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_p_q_inner_data_temp_dc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_p_q_inner_data_temp_dc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &P_QInnerData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindAuthKeyInner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindAuthKeyInner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindAuthKeyInner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempAuthKeyId", wireType)
			}
			m.TempAuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempAuthKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermAuthKeyId", wireType)
			}
			m.PermAuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermAuthKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempSessionId", wireType)
			}
			m.TempSessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempSessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLBindAuthKeyInner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_bind_auth_key_inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_bind_auth_key_inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &BindAuthKeyInner{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server_DH_Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server_DH_Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server_DH_Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNonceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNonceHash = append(m.NewNonceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NewNonceHash == nil {
				m.NewNonceHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedAnswer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLServer_DHParamsFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_server_DH_params_fail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_server_DH_params_fail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &Server_DH_Params{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLServer_DHParamsOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_server_DH_params_ok: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_server_DH_params_ok: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &Server_DH_Params{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server_DHInnerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server_DH_inner_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server_DH_inner_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			m.G = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.G |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhPrime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DhPrime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLServer_DHInnerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_server_DH_inner_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_server_DH_inner_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &Server_DHInnerData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client_DH_Inner_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client_DH_Inner_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client_DH_Inner_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryId", wireType)
			}
			m.RetryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLClient_DHInnerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_client_DH_inner_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_client_DH_inner_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &Client_DH_Inner_Data{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetClient_DHParamsAnswer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Set_client_DH_params_answer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Set_client_DH_params_answer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNonceHash1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNonceHash1 = append(m.NewNonceHash1[:0], dAtA[iNdEx:postIndex]...)
			if m.NewNonceHash1 == nil {
				m.NewNonceHash1 = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNonceHash2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNonceHash2 = append(m.NewNonceHash2[:0], dAtA[iNdEx:postIndex]...)
			if m.NewNonceHash2 == nil {
				m.NewNonceHash2 = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNonceHash3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNonceHash3 = append(m.NewNonceHash3[:0], dAtA[iNdEx:postIndex]...)
			if m.NewNonceHash3 == nil {
				m.NewNonceHash3 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDhGenOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dh_gen_ok: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dh_gen_ok: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &SetClient_DHParamsAnswer{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDhGenRetry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dh_gen_retry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dh_gen_retry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &SetClient_DHParamsAnswer{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDhGenFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_dh_gen_fail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_dh_gen_fail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &SetClient_DHParamsAnswer{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroyAuthKeyRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyAuthKeyRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyAuthKeyRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDestroyAuthKeyOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_destroy_auth_key_ok: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_destroy_auth_key_ok: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &DestroyAuthKeyRes{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDestroyAuthKeyNone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_destroy_auth_key_none: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_destroy_auth_key_none: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &DestroyAuthKeyRes{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDestroyAuthKeyFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_destroy_auth_key_fail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_destroy_auth_key_fail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &DestroyAuthKeyRes{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResPQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResPQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResPQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= (TLConstructor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlHandshake
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ServerPublicKeyFingerprints = append(m.ServerPublicKeyFingerprints, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlHandshake
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlHandshake
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ServerPublicKeyFingerprints) == 0 {
					m.ServerPublicKeyFingerprints = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlHandshake
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ServerPublicKeyFingerprints = append(m.ServerPublicKeyFingerprints, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPublicKeyFingerprints", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLResPQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_resPQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_resPQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ResPQ{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchemaTlHandshake(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchemaTlHandshake
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaTlHandshake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSchemaTlHandshake
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSchemaTlHandshake
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSchemaTlHandshake(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSchemaTlHandshake = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchemaTlHandshake   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("schema.tl.handshake.proto", fileDescriptor_schema_tl_handshake_6d3928bde9719f3c)
}

var fileDescriptor_schema_tl_handshake_6d3928bde9719f3c = []byte{
	// 966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0x4d, 0x72, 0xe3, 0x44,
	0x14, 0xc7, 0x91, 0x3c, 0x4e, 0xec, 0x17, 0xc7, 0xc9, 0xa8, 0xc2, 0x8c, 0x9c, 0xd4, 0x18, 0xa3,
	0x0a, 0x83, 0x59, 0x8c, 0x3d, 0x63, 0x6f, 0x28, 0x76, 0xf9, 0x00, 0xc6, 0x89, 0x49, 0x79, 0x14,
	0xaf, 0xd8, 0x74, 0xb5, 0xa5, 0x1e, 0x49, 0x15, 0xab, 0x25, 0xb7, 0xda, 0x04, 0x9f, 0x81, 0x0b,
	0xb0, 0x9e, 0x0b, 0x70, 0x0d, 0x96, 0x1c, 0x80, 0x05, 0x84, 0x0b, 0xb0, 0x62, 0x47, 0x15, 0xa5,
	0x6e, 0x59, 0x1f, 0xe3, 0xa4, 0x8a, 0xcc, 0x57, 0x65, 0x65, 0xf7, 0xeb, 0xbf, 0xfe, 0xd6, 0xfb,
	0xf5, 0x7b, 0x4f, 0x32, 0x34, 0x22, 0xcb, 0x25, 0x3e, 0xee, 0xf0, 0x69, 0xc7, 0xc5, 0xd4, 0x8e,
	0x5c, 0x7c, 0x41, 0x3a, 0x21, 0x0b, 0x78, 0xa0, 0xad, 0xfb, 0x5c, 0x7c, 0xd9, 0x7d, 0xe2, 0x78,
	0xdc, 0x9d, 0x4f, 0x3a, 0x56, 0xe0, 0x77, 0x9d, 0xc0, 0x09, 0xba, 0x22, 0x3c, 0x99, 0xbf, 0x14,
	0x2b, 0xb1, 0x10, 0xdf, 0xe4, 0x75, 0xbb, 0x1f, 0x67, 0x96, 0x16, 0xb3, 0xfa, 0x3d, 0x19, 0x36,
	0x5e, 0xa9, 0x50, 0x1f, 0xa1, 0x17, 0xc8, 0xa3, 0x94, 0x30, 0x64, 0x63, 0x8e, 0xb5, 0xcf, 0xa0,
	0x1e, 0x32, 0x62, 0x7b, 0x16, 0xe6, 0x04, 0x51, 0xec, 0x13, 0x5d, 0x69, 0x29, 0xed, 0xaa, 0xb9,
	0x99, 0x46, 0xcf, 0xb0, 0x4f, 0xb4, 0x2f, 0x61, 0xc3, 0x0a, 0x68, 0xc4, 0xd9, 0xdc, 0xe2, 0x01,
	0xd3, 0xd5, 0x96, 0xd2, 0xae, 0xf7, 0x1e, 0x74, 0x92, 0xdb, 0xeb, 0x8c, 0x87, 0x47, 0xd9, 0xae,
	0x99, 0x97, 0x6a, 0x75, 0x50, 0xc3, 0x99, 0x5e, 0x12, 0xa6, 0x6a, 0x38, 0xd3, 0x6a, 0xa0, 0x84,
	0xfa, 0x3d, 0xb1, 0x54, 0xc2, 0x78, 0x35, 0xd3, 0xcb, 0x72, 0x35, 0xd3, 0x76, 0xa0, 0x4c, 0x03,
	0x6a, 0x11, 0x7d, 0xad, 0xa5, 0xb4, 0x6b, 0xa6, 0x5c, 0x68, 0x9f, 0x42, 0x2d, 0x22, 0xec, 0x07,
	0xc2, 0x90, 0xdc, 0x5c, 0x17, 0x9b, 0x1b, 0x32, 0x76, 0x26, 0x24, 0x7b, 0x50, 0xa5, 0xe4, 0x32,
	0xd9, 0xaf, 0x88, 0xfd, 0x0a, 0x25, 0x97, 0x72, 0xb3, 0x0e, 0xaa, 0x6d, 0xe9, 0xd5, 0x96, 0xd2,
	0x2e, 0x9b, 0xaa, 0x6d, 0x69, 0x8f, 0x00, 0xc8, 0x8f, 0xa1, 0xc7, 0x48, 0x84, 0x3c, 0xaa, 0x83,
	0x88, 0x57, 0x93, 0xc8, 0x80, 0x1a, 0x87, 0x70, 0x7f, 0x3c, 0x44, 0x21, 0x9a, 0xe5, 0x31, 0x3d,
	0x81, 0x72, 0xfc, 0xd9, 0x13, 0x74, 0x36, 0x7a, 0x0f, 0xd3, 0xcc, 0x8b, 0x38, 0x4d, 0xa9, 0x32,
	0xbe, 0x86, 0x9d, 0x15, 0x0f, 0x64, 0x5b, 0xb7, 0xb5, 0xf9, 0x16, 0x1e, 0xac, 0xda, 0x70, 0xe2,
	0x87, 0xb7, 0x35, 0x3a, 0x81, 0xc6, 0xf5, 0x46, 0x6f, 0x70, 0x53, 0xaf, 0x54, 0xd8, 0x3e, 0xf4,
	0xa8, 0x7d, 0x30, 0xe7, 0xee, 0x29, 0x59, 0x0c, 0x62, 0xc1, 0xfb, 0x2f, 0xa3, 0xb4, 0x34, 0xe2,
	0x4a, 0x2a, 0x2d, 0x4b, 0xe3, 0x73, 0xd8, 0x16, 0x59, 0xe0, 0x39, 0x77, 0xd1, 0x05, 0x59, 0x20,
	0xcf, 0x16, 0xb5, 0x55, 0x32, 0x37, 0xe3, 0xf8, 0xf2, 0x16, 0xed, 0x58, 0x18, 0x12, 0xe6, 0x17,
	0x84, 0x65, 0x29, 0x8c, 0xe3, 0x99, 0xf0, 0x31, 0x6c, 0x09, 0xc7, 0x88, 0x44, 0x91, 0x17, 0xd0,
	0x58, 0xb7, 0x96, 0x19, 0x9e, 0xcb, 0xe8, 0xc0, 0xce, 0x17, 0x11, 0xe6, 0xa2, 0x24, 0xb3, 0x22,
	0x3a, 0xe0, 0xc6, 0x40, 0x9c, 0xdc, 0xc4, 0xa3, 0x76, 0xee, 0x27, 0x05, 0xa9, 0x6e, 0x91, 0x76,
	0x23, 0x4d, 0xfe, 0x75, 0xa6, 0x4b, 0xde, 0xff, 0x2a, 0xb0, 0x7d, 0x2e, 0xeb, 0xff, 0xf8, 0x39,
	0x1a, 0x61, 0x86, 0xfd, 0xe8, 0x03, 0xf3, 0xbe, 0xb1, 0x15, 0xef, 0xad, 0xb6, 0xe2, 0x3e, 0xd4,
	0xd3, 0x56, 0x44, 0x2e, 0x8e, 0x5c, 0xc1, 0xb9, 0x66, 0xd6, 0x96, 0xfd, 0xf8, 0x1c, 0x47, 0xae,
	0xf6, 0x05, 0x6c, 0x13, 0x6a, 0xb1, 0x45, 0xc8, 0x89, 0x8d, 0x30, 0x8d, 0x2e, 0x09, 0x13, 0x9c,
	0xab, 0xe6, 0x56, 0x1a, 0x3f, 0x10, 0x61, 0xe3, 0x14, 0xf4, 0xf1, 0x10, 0x45, 0x29, 0x81, 0x50,
	0x10, 0x40, 0x2f, 0xb1, 0x37, 0xbd, 0x19, 0xe6, 0xeb, 0xc0, 0x96, 0x30, 0xe5, 0xb9, 0xac, 0x98,
	0x05, 0x17, 0xb7, 0xb7, 0xfa, 0x49, 0x85, 0x9d, 0x6c, 0xef, 0x43, 0x8e, 0xd4, 0x37, 0x3e, 0x9b,
	0x1a, 0x28, 0x8e, 0x38, 0x8e, 0xb2, 0xa9, 0x38, 0x5a, 0x03, 0x2a, 0xb6, 0x8b, 0x42, 0xe6, 0xf9,
	0x24, 0x61, 0xbf, 0x6e, 0xbb, 0xa3, 0x78, 0xa9, 0x6d, 0x41, 0xc9, 0x41, 0x58, 0x94, 0x75, 0xd5,
	0x54, 0x9d, 0x03, 0xed, 0x13, 0x48, 0x8c, 0x10, 0x8f, 0xe5, 0x15, 0xe1, 0x01, 0x32, 0x34, 0xf6,
	0x7c, 0x62, 0x9c, 0xc1, 0xc3, 0x02, 0xd8, 0x1c, 0x8f, 0x7e, 0x91, 0xec, 0xa3, 0x6b, 0xc8, 0xae,
	0x4e, 0x99, 0xdf, 0x15, 0xd8, 0x39, 0x9a, 0x7a, 0x84, 0xf2, 0x78, 0x5f, 0x34, 0x04, 0x3a, 0xbe,
	0xdb, 0x74, 0x1b, 0x50, 0x61, 0x84, 0xb3, 0xdc, 0x6c, 0x59, 0x17, 0xeb, 0x81, 0x2d, 0x79, 0x4e,
	0x12, 0xca, 0xaa, 0x73, 0x98, 0xe0, 0xb2, 0xd2, 0x04, 0xff, 0x0f, 0xae, 0xeb, 0x70, 0x2c, 0x71,
	0xfd, 0xa2, 0xc2, 0xde, 0x39, 0xe1, 0x39, 0xc7, 0xa4, 0xb2, 0x65, 0x6f, 0xdd, 0x61, 0x6a, 0x8f,
	0x61, 0xab, 0x38, 0x2f, 0x9e, 0x25, 0x03, 0x63, 0x33, 0x3f, 0x30, 0x9e, 0xad, 0xea, 0x7a, 0xc9,
	0x5b, 0x42, 0x41, 0xd7, 0x5b, 0xd5, 0xf5, 0x93, 0x17, 0x86, 0x82, 0xae, 0x6f, 0x9c, 0x40, 0x6d,
	0x3c, 0x44, 0xb6, 0x8b, 0x1c, 0x42, 0xe3, 0xfe, 0xff, 0xaa, 0x88, 0x7d, 0x3f, 0x57, 0xa5, 0x37,
	0x62, 0x5d, 0xd2, 0xff, 0x0e, 0xb6, 0x32, 0x2f, 0x71, 0xe6, 0x6f, 0x65, 0x37, 0x84, 0x7a, 0x66,
	0x27, 0xe6, 0xdc, 0xdb, 0xb8, 0x71, 0xb8, 0x7f, 0x4c, 0x22, 0xce, 0x82, 0x45, 0xf2, 0x74, 0x31,
	0xc9, 0xfb, 0x7f, 0x7e, 0x18, 0x27, 0x62, 0xd0, 0xda, 0xf2, 0x87, 0xb3, 0x67, 0x60, 0x70, 0xa1,
	0x3d, 0x2d, 0xe6, 0xb2, 0x9b, 0xba, 0xad, 0xdc, 0x65, 0xc6, 0x43, 0xbf, 0xce, 0x8b, 0x06, 0x94,
	0xbc, 0x3b, 0x37, 0xc1, 0xf9, 0xf6, 0x6e, 0xff, 0x28, 0x50, 0x36, 0x49, 0x34, 0x7a, 0x71, 0x87,
	0x5b, 0x4c, 0xbe, 0x82, 0x97, 0xd3, 0x57, 0xf0, 0x23, 0x68, 0x26, 0x97, 0x84, 0xf3, 0xc9, 0xd4,
	0xb3, 0x64, 0xfe, 0x1e, 0x75, 0x08, 0x0b, 0x99, 0x47, 0x79, 0xa4, 0xaf, 0xb5, 0x4a, 0xed, 0x92,
	0xb9, 0x27, 0x55, 0x23, 0x21, 0x3a, 0x25, 0x8b, 0x6f, 0x72, 0x12, 0xe3, 0x29, 0x54, 0xc6, 0x43,
	0xc4, 0x44, 0xea, 0xfb, 0x45, 0x6c, 0xf5, 0x34, 0x1b, 0x41, 0x26, 0x41, 0x75, 0xd8, 0xfd, 0xfb,
	0xcf, 0xa6, 0xf2, 0xeb, 0x55, 0x53, 0xf9, 0xed, 0xaa, 0xa9, 0xfc, 0x71, 0xd5, 0x54, 0x7e, 0xfe,
	0xab, 0xf9, 0xd1, 0xf7, 0x0d, 0xf1, 0xb7, 0xc5, 0x72, 0x31, 0xef, 0x5a, 0xd3, 0x79, 0xc4, 0x09,
	0xeb, 0x26, 0x57, 0x4f, 0xd6, 0xc4, 0x47, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x28,
	0x8e, 0xb7, 0x21, 0x0d, 0x00, 0x00,
}
