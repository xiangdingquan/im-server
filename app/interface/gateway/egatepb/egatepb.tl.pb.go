// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: egatepb.tl.proto

package egatepb // import "open.chat/app/interface/gateway/egatepb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import mtproto "open.chat/mtproto"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SessionRawData struct {
	AuthKeyId            int64    `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId            int64    `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionRawData) Reset()         { *m = SessionRawData{} }
func (m *SessionRawData) String() string { return proto.CompactTextString(m) }
func (*SessionRawData) ProtoMessage()    {}
func (*SessionRawData) Descriptor() ([]byte, []int) {
	return fileDescriptor_egatepb_tl_cb5642b987531e21, []int{0}
}
func (m *SessionRawData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRawData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRawData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionRawData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRawData.Merge(dst, src)
}
func (m *SessionRawData) XXX_Size() int {
	return m.Size()
}
func (m *SessionRawData) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRawData.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRawData proto.InternalMessageInfo

func (m *SessionRawData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *SessionRawData) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionRawData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionRawData)(nil), "egatepb.SessionRawData")
}
func (this *SessionRawData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&egatepb.SessionRawData{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEgatepbTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EGateClient is the client API for EGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EGateClient interface {
	ReceiveData(ctx context.Context, in *SessionRawData, opts ...grpc.CallOption) (*mtproto.Bool, error)
}

type eGateClient struct {
	cc *grpc.ClientConn
}

func NewEGateClient(cc *grpc.ClientConn) EGateClient {
	return &eGateClient{cc}
}

func (c *eGateClient) ReceiveData(ctx context.Context, in *SessionRawData, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/egatepb.EGate/ReceiveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EGate service

type EGateServer interface {
	ReceiveData(context.Context, *SessionRawData) (*mtproto.Bool, error)
}

func RegisterEGateServer(s *grpc.Server, srv EGateServer) {
	s.RegisterService(&_EGate_serviceDesc, srv)
}

func _EGate_ReceiveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EGateServer).ReceiveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/egatepb.EGate/ReceiveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EGateServer).ReceiveData(ctx, req.(*SessionRawData))
	}
	return interceptor(ctx, in, info, handler)
}

var _EGate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "egatepb.EGate",
	HandlerType: (*EGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveData",
			Handler:    _EGate_ReceiveData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egatepb.tl.proto",
}

func (m *SessionRawData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRawData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEgatepbTl(dAtA, i, uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEgatepbTl(dAtA, i, uint64(m.SessionId))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEgatepbTl(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEgatepbTl(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SessionRawData) Size() (n int) {
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovEgatepbTl(uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovEgatepbTl(uint64(m.SessionId))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovEgatepbTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEgatepbTl(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEgatepbTl(x uint64) (n int) {
	return sovEgatepbTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionRawData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEgatepbTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRawData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRawData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEgatepbTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEgatepbTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEgatepbTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEgatepbTl
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEgatepbTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEgatepbTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEgatepbTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEgatepbTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEgatepbTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEgatepbTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEgatepbTl
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEgatepbTl
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEgatepbTl(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEgatepbTl = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEgatepbTl   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("egatepb.tl.proto", fileDescriptor_egatepb_tl_cb5642b987531e21) }

var fileDescriptor_egatepb_tl_cb5642b987531e21 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x31, 0x15, 0x54, 0xb8, 0x80, 0x50, 0x16, 0xaa, 0x48, 0x44, 0x55, 0xa7, 0x2e, 0xd8,
	0x52, 0x19, 0x58, 0x51, 0x55, 0x84, 0x2a, 0xb6, 0xb0, 0xb1, 0x54, 0x17, 0xe7, 0x9a, 0x58, 0xa4,
	0xb1, 0x15, 0x5f, 0x40, 0x79, 0x43, 0x46, 0x1e, 0x01, 0xf2, 0x04, 0x3c, 0x02, 0x8a, 0x93, 0x0e,
	0x6c, 0xfe, 0xfe, 0x4f, 0xf7, 0xdf, 0x99, 0x5f, 0x61, 0x06, 0x84, 0x36, 0x11, 0x54, 0x08, 0x5b,
	0x19, 0x32, 0xc1, 0x78, 0x48, 0xc2, 0xdb, 0x4c, 0x53, 0x5e, 0x27, 0x42, 0x99, 0xbd, 0xcc, 0x4c,
	0x66, 0xa4, 0xf7, 0x49, 0xbd, 0xf3, 0xe4, 0xc1, 0xbf, 0xfa, 0xb9, 0x30, 0x74, 0x2a, 0xc7, 0x3d,
	0x74, 0x45, 0xca, 0x54, 0xb8, 0xa5, 0xc6, 0xa2, 0xeb, 0xdd, 0x5c, 0xf3, 0xcb, 0x17, 0x74, 0x4e,
	0x9b, 0x32, 0x86, 0x8f, 0x35, 0x10, 0x04, 0x11, 0x9f, 0x40, 0x4d, 0xf9, 0xf6, 0x0d, 0x9b, 0xad,
	0x4e, 0xa7, 0x6c, 0xc6, 0x16, 0xa3, 0xf8, 0xac, 0x8b, 0x9e, 0xb1, 0xd9, 0xa4, 0xc1, 0x0d, 0xe7,
	0xae, 0x9f, 0xe8, 0xf4, 0x71, 0xaf, 0x87, 0x64, 0x93, 0x06, 0x53, 0x3e, 0xb6, 0xd0, 0x14, 0x06,
	0xd2, 0xe9, 0x68, 0xc6, 0x16, 0xe7, 0xf1, 0x01, 0x97, 0x0f, 0xfc, 0xe4, 0xf1, 0x09, 0x08, 0x83,
	0x7b, 0x3e, 0x89, 0x51, 0xa1, 0x7e, 0x47, 0xbf, 0xf0, 0x5a, 0x1c, 0x7e, 0xfa, 0xff, 0x92, 0xf0,
	0x42, 0xec, 0xc9, 0x5f, 0x29, 0x56, 0xc6, 0x14, 0xf3, 0xa3, 0xd5, 0xfa, 0xf7, 0x27, 0x62, 0x9f,
	0x6d, 0xc4, 0xbe, 0xda, 0x88, 0x7d, 0xb7, 0x11, 0x7b, 0x5d, 0x96, 0x98, 0xd4, 0x05, 0x08, 0x95,
	0x03, 0x49, 0x2c, 0x09, 0x2b, 0x5b, 0x69, 0x87, 0x12, 0xac, 0x95, 0xba, 0xc3, 0x1d, 0x28, 0x94,
	0xbe, 0x5f, 0x0e, 0x5b, 0x92, 0x53, 0xdf, 0x79, 0xf7, 0x17, 0x00, 0x00, 0xff, 0xff, 0x73, 0x13,
	0x2f, 0x51, 0x61, 0x01, 0x00, 0x00,
}
