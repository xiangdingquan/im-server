// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bot.proto

package botpb // import "open.chat/app/bots/botpb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import mtproto "open.chat/mtproto"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BotUpdates struct {
	BotId                int32            `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Updates              *mtproto.Updates `protobuf:"bytes,2,opt,name=updates" json:"updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BotUpdates) Reset()         { *m = BotUpdates{} }
func (m *BotUpdates) String() string { return proto.CompactTextString(m) }
func (*BotUpdates) ProtoMessage()    {}
func (*BotUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_bot_9b3efc320b96f7c0, []int{0}
}
func (m *BotUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BotUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotUpdates.Merge(dst, src)
}
func (m *BotUpdates) XXX_Size() int {
	return m.Size()
}
func (m *BotUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_BotUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_BotUpdates proto.InternalMessageInfo

func (m *BotUpdates) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *BotUpdates) GetUpdates() *mtproto.Updates {
	if m != nil {
		return m.Updates
	}
	return nil
}

type GetBotCallbackAnswer struct {
	UserId               int32            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId            int64            `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	IsGame               bool             `protobuf:"varint,3,opt,name=is_game,json=isGame,proto3" json:"is_game,omitempty"`
	BotId                int32            `protobuf:"varint,4,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Message              *mtproto.Message `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Data                 string           `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetBotCallbackAnswer) Reset()         { *m = GetBotCallbackAnswer{} }
func (m *GetBotCallbackAnswer) String() string { return proto.CompactTextString(m) }
func (*GetBotCallbackAnswer) ProtoMessage()    {}
func (*GetBotCallbackAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bot_9b3efc320b96f7c0, []int{1}
}
func (m *GetBotCallbackAnswer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBotCallbackAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBotCallbackAnswer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBotCallbackAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBotCallbackAnswer.Merge(dst, src)
}
func (m *GetBotCallbackAnswer) XXX_Size() int {
	return m.Size()
}
func (m *GetBotCallbackAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBotCallbackAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_GetBotCallbackAnswer proto.InternalMessageInfo

func (m *GetBotCallbackAnswer) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetBotCallbackAnswer) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *GetBotCallbackAnswer) GetIsGame() bool {
	if m != nil {
		return m.IsGame
	}
	return false
}

func (m *GetBotCallbackAnswer) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *GetBotCallbackAnswer) GetMessage() *mtproto.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *GetBotCallbackAnswer) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type GetInlineBotResults struct {
	UserId               int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId            int64                  `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Bot                  *mtproto.InputUser     `protobuf:"bytes,3,opt,name=bot" json:"bot,omitempty"`
	Peer                 *mtproto.InputPeer     `protobuf:"bytes,4,opt,name=peer" json:"peer,omitempty"`
	GeoPoint             *mtproto.InputGeoPoint `protobuf:"bytes,5,opt,name=geo_point,json=geoPoint" json:"geo_point,omitempty"`
	Query                string                 `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	Offset               string                 `protobuf:"bytes,7,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetInlineBotResults) Reset()         { *m = GetInlineBotResults{} }
func (m *GetInlineBotResults) String() string { return proto.CompactTextString(m) }
func (*GetInlineBotResults) ProtoMessage()    {}
func (*GetInlineBotResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_bot_9b3efc320b96f7c0, []int{2}
}
func (m *GetInlineBotResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInlineBotResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInlineBotResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetInlineBotResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInlineBotResults.Merge(dst, src)
}
func (m *GetInlineBotResults) XXX_Size() int {
	return m.Size()
}
func (m *GetInlineBotResults) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInlineBotResults.DiscardUnknown(m)
}

var xxx_messageInfo_GetInlineBotResults proto.InternalMessageInfo

func (m *GetInlineBotResults) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetInlineBotResults) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *GetInlineBotResults) GetBot() *mtproto.InputUser {
	if m != nil {
		return m.Bot
	}
	return nil
}

func (m *GetInlineBotResults) GetPeer() *mtproto.InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *GetInlineBotResults) GetGeoPoint() *mtproto.InputGeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *GetInlineBotResults) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *GetInlineBotResults) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type QueryInlineBotResult struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId            int64    `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	QueryId              int64    `protobuf:"varint,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryInlineBotResult) Reset()         { *m = QueryInlineBotResult{} }
func (m *QueryInlineBotResult) String() string { return proto.CompactTextString(m) }
func (*QueryInlineBotResult) ProtoMessage()    {}
func (*QueryInlineBotResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bot_9b3efc320b96f7c0, []int{3}
}
func (m *QueryInlineBotResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInlineBotResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInlineBotResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryInlineBotResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInlineBotResult.Merge(dst, src)
}
func (m *QueryInlineBotResult) XXX_Size() int {
	return m.Size()
}
func (m *QueryInlineBotResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInlineBotResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInlineBotResult proto.InternalMessageInfo

func (m *QueryInlineBotResult) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *QueryInlineBotResult) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *QueryInlineBotResult) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *QueryInlineBotResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*BotUpdates)(nil), "pushpb.BotUpdates")
	proto.RegisterType((*GetBotCallbackAnswer)(nil), "pushpb.GetBotCallbackAnswer")
	proto.RegisterType((*GetInlineBotResults)(nil), "pushpb.GetInlineBotResults")
	proto.RegisterType((*QueryInlineBotResult)(nil), "pushpb.QueryInlineBotResult")
}
func (this *BotUpdates) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&botpb.BotUpdates{")
	s = append(s, "BotId: "+fmt.Sprintf("%#v", this.BotId)+",")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBotCallbackAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&botpb.GetBotCallbackAnswer{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",")
	s = append(s, "IsGame: "+fmt.Sprintf("%#v", this.IsGame)+",")
	s = append(s, "BotId: "+fmt.Sprintf("%#v", this.BotId)+",")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",")
	}
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetInlineBotResults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&botpb.GetInlineBotResults{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",")
	if this.Bot != nil {
		s = append(s, "Bot: "+fmt.Sprintf("%#v", this.Bot)+",")
	}
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",")
	}
	if this.GeoPoint != nil {
		s = append(s, "GeoPoint: "+fmt.Sprintf("%#v", this.GeoPoint)+",")
	}
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryInlineBotResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&botpb.QueryInlineBotResult{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",")
	s = append(s, "QueryId: "+fmt.Sprintf("%#v", this.QueryId)+",")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBot(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCBotsClient is the client API for RPCBots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCBotsClient interface {
	// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	MessagesGetInlineBotResults(ctx context.Context, in *GetInlineBotResults, opts ...grpc.CallOption) (*mtproto.Messages_BotResults, error)
	// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer(ctx context.Context, in *GetBotCallbackAnswer, opts ...grpc.CallOption) (*mtproto.Messages_BotCallbackAnswer, error)
	//
	MessagesQueryInlineBotResult(ctx context.Context, in *QueryInlineBotResult, opts ...grpc.CallOption) (*mtproto.BotInlineResult, error)
}

type rPCBotsClient struct {
	cc *grpc.ClientConn
}

func NewRPCBotsClient(cc *grpc.ClientConn) RPCBotsClient {
	return &rPCBotsClient{cc}
}

func (c *rPCBotsClient) MessagesGetInlineBotResults(ctx context.Context, in *GetInlineBotResults, opts ...grpc.CallOption) (*mtproto.Messages_BotResults, error) {
	out := new(mtproto.Messages_BotResults)
	err := c.cc.Invoke(ctx, "/pushpb.RPCBots/messages_getInlineBotResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) MessagesGetBotCallbackAnswer(ctx context.Context, in *GetBotCallbackAnswer, opts ...grpc.CallOption) (*mtproto.Messages_BotCallbackAnswer, error) {
	out := new(mtproto.Messages_BotCallbackAnswer)
	err := c.cc.Invoke(ctx, "/pushpb.RPCBots/messages_getBotCallbackAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) MessagesQueryInlineBotResult(ctx context.Context, in *QueryInlineBotResult, opts ...grpc.CallOption) (*mtproto.BotInlineResult, error) {
	out := new(mtproto.BotInlineResult)
	err := c.cc.Invoke(ctx, "/pushpb.RPCBots/messages_queryInlineBotResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCBots service

type RPCBotsServer interface {
	// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	MessagesGetInlineBotResults(context.Context, *GetInlineBotResults) (*mtproto.Messages_BotResults, error)
	// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer(context.Context, *GetBotCallbackAnswer) (*mtproto.Messages_BotCallbackAnswer, error)
	//
	MessagesQueryInlineBotResult(context.Context, *QueryInlineBotResult) (*mtproto.BotInlineResult, error)
}

func RegisterRPCBotsServer(s *grpc.Server, srv RPCBotsServer) {
	s.RegisterService(&_RPCBots_serviceDesc, srv)
}

func _RPCBots_MessagesGetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).MessagesGetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pushpb.RPCBots/MessagesGetInlineBotResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).MessagesGetInlineBotResults(ctx, req.(*GetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_MessagesGetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).MessagesGetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pushpb.RPCBots/MessagesGetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).MessagesGetBotCallbackAnswer(ctx, req.(*GetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_MessagesQueryInlineBotResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInlineBotResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).MessagesQueryInlineBotResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pushpb.RPCBots/MessagesQueryInlineBotResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).MessagesQueryInlineBotResult(ctx, req.(*QueryInlineBotResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCBots_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pushpb.RPCBots",
	HandlerType: (*RPCBotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getInlineBotResults",
			Handler:    _RPCBots_MessagesGetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_getBotCallbackAnswer",
			Handler:    _RPCBots_MessagesGetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_queryInlineBotResult",
			Handler:    _RPCBots_MessagesQueryInlineBotResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot.proto",
}

func (m *BotUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.BotId))
	}
	if m.Updates != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Updates.Size()))
		n1, err := m.Updates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBotCallbackAnswer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotCallbackAnswer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.AuthKeyId))
	}
	if m.IsGame {
		dAtA[i] = 0x18
		i++
		if m.IsGame {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.BotId))
	}
	if m.Message != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Message.Size()))
		n2, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetInlineBotResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInlineBotResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.AuthKeyId))
	}
	if m.Bot != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Bot.Size()))
		n3, err := m.Bot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Peer != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Peer.Size()))
		n4, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GeoPoint != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.GeoPoint.Size()))
		n5, err := m.GeoPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Query) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if len(m.Offset) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Offset)))
		i += copy(dAtA[i:], m.Offset)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryInlineBotResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInlineBotResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.AuthKeyId))
	}
	if m.QueryId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.QueryId))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BotUpdates) Size() (n int) {
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovBot(uint64(m.BotId))
	}
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovBot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBotCallbackAnswer) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovBot(uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovBot(uint64(m.AuthKeyId))
	}
	if m.IsGame {
		n += 2
	}
	if m.BotId != 0 {
		n += 1 + sovBot(uint64(m.BotId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInlineBotResults) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovBot(uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovBot(uint64(m.AuthKeyId))
	}
	if m.Bot != nil {
		l = m.Bot.Size()
		n += 1 + l + sovBot(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovBot(uint64(l))
	}
	if m.GeoPoint != nil {
		l = m.GeoPoint.Size()
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryInlineBotResult) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovBot(uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovBot(uint64(m.AuthKeyId))
	}
	if m.QueryId != 0 {
		n += 1 + sovBot(uint64(m.QueryId))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBot(x uint64) (n int) {
	return sovBot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BotUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &mtproto.Updates{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBotCallbackAnswer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotCallbackAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotCallbackAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGame", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGame = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &mtproto.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInlineBotResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInlineBotResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInlineBotResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bot == nil {
				m.Bot = &mtproto.InputUser{}
			}
			if err := m.Bot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &mtproto.InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoPoint == nil {
				m.GeoPoint = &mtproto.InputGeoPoint{}
			}
			if err := m.GeoPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInlineBotResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInlineBotResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInlineBotResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBot   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bot.proto", fileDescriptor_bot_9b3efc320b96f7c0) }

var fileDescriptor_bot_9b3efc320b96f7c0 = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x93, 0xc6, 0x69, 0xa6, 0xd2, 0xa7, 0x4f, 0x43, 0x28, 0x26, 0x84, 0x28, 0x32, 0x08,
	0x45, 0x48, 0x38, 0x52, 0xca, 0x0b, 0xe0, 0x2e, 0x22, 0x0b, 0x21, 0xc2, 0x48, 0x5d, 0x00, 0x8b,
	0x68, 0xc6, 0xbe, 0x71, 0xac, 0xda, 0x1e, 0xd7, 0x73, 0x2d, 0x14, 0x5e, 0x88, 0xc7, 0x60, 0xcb,
	0x92, 0x47, 0x80, 0x3c, 0x01, 0x6f, 0x00, 0xf2, 0xd8, 0x4d, 0xd3, 0x24, 0xab, 0x6e, 0xa2, 0x39,
	0xf7, 0x9c, 0x7b, 0xee, 0x5f, 0x4c, 0x3a, 0x42, 0xa2, 0x93, 0xe5, 0x12, 0x25, 0x35, 0xb3, 0x42,
	0x2d, 0x33, 0xd1, 0x7b, 0x15, 0x46, 0xb8, 0x2c, 0x84, 0xe3, 0xcb, 0x64, 0x1c, 0xca, 0x50, 0x8e,
	0x35, 0x2d, 0x8a, 0x85, 0x46, 0x1a, 0xe8, 0x57, 0x95, 0xd6, 0xeb, 0x2a, 0x7f, 0x09, 0x09, 0x77,
	0x30, 0x76, 0xd4, 0x2a, 0xf5, 0xab, 0xa8, 0xfd, 0x9e, 0x10, 0x57, 0xe2, 0x65, 0x16, 0x70, 0x04,
	0x45, 0x1f, 0x12, 0x53, 0x48, 0x9c, 0x47, 0x81, 0x65, 0x0c, 0x8d, 0x51, 0x8b, 0xb5, 0x84, 0x44,
	0x2f, 0xa0, 0x2f, 0x49, 0xbb, 0xa8, 0x14, 0x56, 0x63, 0x68, 0x8c, 0x4e, 0x27, 0xff, 0x3b, 0x09,
	0xea, 0x7c, 0xa7, 0xce, 0x64, 0x37, 0x02, 0xfb, 0xbb, 0x41, 0xba, 0x53, 0x40, 0x57, 0xe2, 0x05,
	0x8f, 0x63, 0xc1, 0xfd, 0xab, 0x37, 0xa9, 0xfa, 0x02, 0x39, 0x7d, 0x44, 0xda, 0x85, 0x82, 0xfc,
	0xd6, 0xdc, 0x2c, 0xa1, 0x17, 0xd0, 0x01, 0x39, 0xe5, 0x05, 0x2e, 0xe7, 0x57, 0xb0, 0x2a, 0xc9,
	0xb2, 0x42, 0x93, 0x75, 0xca, 0xd0, 0x5b, 0x58, 0x79, 0x41, 0x99, 0x18, 0xa9, 0x79, 0xc8, 0x13,
	0xb0, 0x9a, 0x43, 0x63, 0x74, 0xc2, 0xcc, 0x48, 0x4d, 0x79, 0x02, 0x5b, 0xdd, 0x1e, 0xef, 0x74,
	0x9b, 0x80, 0x52, 0x3c, 0x04, 0xab, 0xb5, 0xd3, 0xed, 0xbb, 0x2a, 0xce, 0x6e, 0x04, 0x94, 0x92,
	0xe3, 0x80, 0x23, 0xb7, 0xcc, 0xa1, 0x31, 0xea, 0x30, 0xfd, 0xb6, 0xff, 0x1a, 0xe4, 0xc1, 0x14,
	0xd0, 0x4b, 0xe3, 0x28, 0x05, 0x57, 0x22, 0x03, 0x55, 0xc4, 0xa8, 0xee, 0x3f, 0xc0, 0x73, 0xd2,
	0x14, 0x12, 0x75, 0xf3, 0xa7, 0x13, 0xba, 0x69, 0xc6, 0x4b, 0xb3, 0x02, 0x2f, 0x15, 0xe4, 0xac,
	0xa4, 0xe9, 0x0b, 0x72, 0x9c, 0x01, 0xe4, 0x7a, 0x96, 0x3d, 0xd9, 0x0c, 0x20, 0x67, 0x9a, 0xa7,
	0xe7, 0xa4, 0x13, 0x82, 0x9c, 0x67, 0x32, 0x4a, 0xb1, 0x1e, 0xf0, 0xec, 0xae, 0x78, 0x0a, 0x72,
	0x56, 0xb2, 0xec, 0x24, 0xac, 0x5f, 0xb4, 0x4b, 0x5a, 0xd7, 0x05, 0xe4, 0xab, 0x7a, 0xd0, 0x0a,
	0xd0, 0x33, 0x62, 0xca, 0xc5, 0x42, 0x01, 0x5a, 0x6d, 0x1d, 0xae, 0x91, 0xfd, 0x95, 0x74, 0x3f,
	0x94, 0x82, 0x9d, 0x15, 0xdc, 0x7f, 0x03, 0x8f, 0xc9, 0x89, 0xae, 0x58, 0x92, 0x4d, 0x4d, 0xb6,
	0x35, 0xf6, 0x02, 0xfa, 0x1f, 0x69, 0xd4, 0x07, 0xec, 0xb0, 0x46, 0x14, 0x4c, 0xbe, 0x35, 0x48,
	0x9b, 0xcd, 0x2e, 0x5c, 0x89, 0x8a, 0x7e, 0x26, 0xfd, 0xfa, 0x50, 0x6a, 0x1e, 0x1e, 0xb8, 0xc8,
	0x13, 0xa7, 0xfa, 0x14, 0x9c, 0x03, 0xe7, 0xea, 0xf5, 0x37, 0x4b, 0xd9, 0x78, 0xdc, 0xb2, 0xf6,
	0x11, 0x0d, 0xc8, 0xd3, 0x6d, 0xf3, 0xfd, 0x3f, 0x6c, 0x7f, 0xcb, 0x7d, 0x8f, 0xed, 0x3d, 0x3b,
	0x68, 0x7f, 0x57, 0x64, 0x1f, 0xd1, 0x8f, 0x5b, 0x55, 0xae, 0x0f, 0xed, 0x74, 0x53, 0xe5, 0xd0,
	0xc6, 0x7b, 0xd6, 0xa6, 0x8a, 0x2b, 0xeb, 0x11, 0x2b, 0xc6, 0x3e, 0x72, 0x5f, 0xff, 0xf9, 0x3d,
	0x30, 0x7e, 0xac, 0x07, 0xc6, 0xcf, 0xf5, 0xc0, 0xf8, 0xb5, 0x1e, 0x18, 0x9f, 0xec, 0x14, 0x44,
	0x11, 0x73, 0xc7, 0x5f, 0x72, 0x1c, 0xfb, 0x71, 0xa1, 0x10, 0xf2, 0x31, 0xcf, 0xb2, 0xb1, 0x90,
	0xa8, 0xca, 0x9f, 0x4c, 0x08, 0x53, 0xdb, 0x9d, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x68, 0xfa,
	0x55, 0x8f, 0x51, 0x04, 0x00, 0x00,
}
